!=========================================================================
    SUBROUTINE mnk1(k)
!=========================================================================
!
!            //           r2^k
!   Computes || dr1 dr2  -----B_i(r1) B_j(r2) B_ip(r1) B_jp(r2) E(r1-r2)
!            //         r1^(k+3)
!
!
!   Calling sequence:
!
!       mnk1
!       ----
!      /    \
!   moment nk_pdiag
!            ||
!          nk_triang
!           /   \
!        gauss  qbsplvb
!
!-------------------------------------------------------------------------
!
!   on entry
!   --------
!       k     the power of the factor in the integrals
!
!   on exit
!   -------
!       rkb   four-dimensional array of the Nk integrals in
!             the Spline basis
!
!-------------------------------------------------------------------------

    USE spline_param
    USE spline_integrals
    USE spline_moments
    USE spline_atomic
    USE spline_grid

    IMPLICIT NONE
    INTEGER, INTENT(IN) :: k

    ! .. local variables

    INTEGER(4) :: iv,ih,i, ihp,ip, jv,jh,j, jhp,jp
    REAL(8) :: c

    ! .. check the need of calculations

    if(itype == 'aaa') Call allocate_integrals
    if(itype == 'nk1' .and. krk == k) Return

    ! .. compute the moments in the spline basis

    if(mtype == 'aaa') Call allocate_moments

    CALL moment(     k, rkt1)
    CALL moment(-(k+3), rkt2)
    CALL nk_pdiag

    ! .. assemble the moments

    rkb=0.d0

    DO iv=1,nv
      DO ih=1,ks
        i = iv + ih - 1
        DO ihp=ih,ks
          ip = ihp - ih + 1

          DO jv=1,iv          ! .. jv<=iv
           
           DO jh=1,ks
            j = jv + jh - 1
            DO jhp=jh,ks
             jp = jhp - jh + 1


        IF( jv < iv ) THEN

            c =  rkt2(ih,ihp,iv)*rkt1(jh,jhp,jv)
        
        ELSE        ! .. iv=jv

            c =  rkt(ih,jh,ihp,jhp,iv)

        END IF

            rkb(i,j,ip,jp) = rkb(i,j,ip,jp) + c
         
              END DO
            END DO
          END DO
        END DO
      END DO
    END DO

    rkb = rkb * fine

    itype = 'nk1'
    krk = k



!-------------------------------------------------------------------
  CONTAINS
!-------------------------------------------------------------------



!===================================================================
  SUBROUTINE nk_pdiag
!===================================================================
!
!   Computes the Nk matrix elements in the triangle cells
!
!   SUBROUTINES called:
!       nk_triang
!
!-------------------------------------------------------------------
!
!   on entry
!   --------
!       k       the power of moments
!
!   on exit
!   -------
!       rkt     the four-dimensional array of pieces
!               defining <B_i B_j|r2^k/r1^(k+3) E(r1-r2)|B_i' B_j'>
!               over the lower triangle
!
!-------------------------------------------------------------------

    IMPLICIT NONE

    ! .. local variables

    INTEGER :: iv
    REAL(KIND=8) :: hp1

    ! .. the first equal step region.

    DO iv=1,ml+ks-1
      CALL nk_triang(iv)
    END DO

    ! .. the log region --- using scaling law.

    hp1=h+1.d0
    DO iv=ml+ks,ml+me-ks+2
      rkt(:,:,:,:,iv) = rkt(:,:,:,:,iv-1) / hp1
    END DO

    ! .. the last equal step region

    DO iv=ml+me-ks+3,nv
      CALL nk_triang(iv)
    END DO

    END SUBROUTINE nk_pdiag





!========================================================================
    SUBROUTINE nk_triang(iv)
!========================================================================
!
!   Returns the "NK matrix element" in low triangle cell 
!                                                           
!------------------------------------------------------------------------
!
!   SUBROUTINES called:
!       gauss
!       vbsplvd
!
!------------------------------------------------------------------------
!
!   On entry
!   --------
!       k:     the indices of of the bsplines
!       iv:    the index of the integration region
!
!------------------------------------------------------------------------

    IMPLICIT NONE

    INTEGER, INTENT(in) :: iv

    ! .. local variables

    INTEGER :: i,j, ip,jp, m,left
    REAL(KIND=8) :: xbase, c
    REAL(KIND=8), DIMENSION(ks) :: x,w, gx,gw
    REAL(KIND=8), DIMENSION(ks,ks) :: bspTmp
    REAL(KIND=8), DIMENSION(ks,ks,ks) ::  Int
    REAL(KIND=8), DIMENSION(nv,ks,ks) :: dbiatx

    left=iv+ks-1
    xbase=t(left)

    ! .. setup the gaussian points

    CALL gauss(ks,x,w)

    DO m=1,ks

! .. the absolute coordinate at the new gaussian point

      gx(:) = (gr(iv,m)-xbase)*x(:) + xbase

! .. the bspline values at the new gaussian points

      DO i=1,ks
        Call vbsplvd(t,left,1,gx(i),1,dbiatx)
        bspTmp (i,:) = dbiatx(1,:,1)
      END DO

! .. and the corresponding gaussian weights

      gw(:) = (gr(iv,m)-xbase)*w(:) * gx(:)**k

!            / r(iv,m)                             k
! .. Int =  |      bsp(iv,:,j)(r) bsp(iv,:,jp)(r) r  dr
!           / r_iv

      c = grw(iv,m) * grm(iv,m)**(k+3)
      DO j=1,ks
        gx(:) = gw(:)*bspTmp(:,j)
        DO jp=j,ks
          Int(j,jp,m) = SUM(gx(:)*bspTmp(:,jp)) * c
        END DO
      END DO

    END DO    ! over m


    DO i=1,ks
     DO ip=i,ks
      gx(:) = bsp(iv,:,i)*bsp(iv,:,ip)
      DO j=1,ks
       DO jp=j,ks
         rkt(i,j,ip,jp,iv) = SUM(gx(:)*INT(j,jp,:))
       END DO
      END DO
     END DO
    END DO

    END SUBROUTINE nk_triang

    END SUBROUTINE mnk1

