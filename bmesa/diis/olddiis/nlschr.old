*deck nlschr.f
c***begin prologue     nlschr
c***date written       951229   (yymmdd)
c***revision date      yymmdd   (yymmdd)
c***keywords           non-linear schroedinger equation, gross-pitaevski
c***author             schneider, barry (nsf)
c***source             timeprp
c***purpose            calculate eigenvalues of gross-pitaevski equation
c***                   
c***                   
c***references         
c
c***routines called    
c***end prologue       nlschr
      subroutine nlschr(pndvr,obj,err,eigr,ham0,ham,eig,tmat,psi,b,btmp,
     1                  sol,work1,work2,table,ipvt,natmin,natmax,hbar,
     2                  amass,omega,scatl,todiis,cnverg,n,nobj,nerr,
     3                  maxit,nstep,dim,trunc,prnt,drctv,type)
      implicit integer (a-z)
      real*8 pndvr, obj, err, eigr, ham0, ham, eig, psi, b, btmp, sol
      real*8 natmin, natmax, natoms, delat, hbar, amass
      real*8 omega, scatl, cnverg, error, test, tmat
      real*8 gamma, norm0, pi
      real*8 zero, one
      real*8 work1, work2, eig0, crit, todiis, table
      character*80 title
      character*(*) type
      logical drctv, prnt, flag
      dimension pndvr(n,0:n-1), obj(nobj,maxit+1), err(nerr,maxit+1)
      dimension sol(maxit+1), b(maxit+1,maxit+1)
      dimension btmp(maxit+1,maxit+1), ipvt(maxit+1)
      dimension eigr(n), ham0(n,n), ham(n,n), eig(n), psi(n)
      dimension work1(*), work2(*), tmat(n,n)
      dimension table(dim,3)
      common/io/inp, iout
      data pi/3.14159265358979323844d0/
      data zero, one/ 0.d0, 1.d0/
c      data error, test /1.d+10, 1.d+10/ 
      norm0=sqrt(2.d0*amass*omega/hbar)/(4.d0*pi)
      norm0=sqrt(norm0)
      write(iout,1)
      write(iout,2) amass, omega, scatl
      write(iout,3) maxit, cnverg
      natoms=natmin
      delat=(natmax - natmin)/nstep
      call rzero(work1,n)
      count=0
      do 1000 num=1,nstep+1
         crit = todiis
         test = crit
c      
c     ham0 contains the kinetic energy plus harmonic trap potential
c
c     get the guess by diagonalizing an approximation to ham
         gamma=8.d0*pi*scatl*natoms
         write(iout,4) natoms
         call approx(pndvr,obj,eigr,ham0,ham,eig,tmat,psi,work1,
     1               norm0,gamma,n,nobj,type,drctv,prnt)
         iter=1         
         write(iout,5) iter, eig(1)
         eig0=eig(1)
         do 10 iter=2,maxit
c
c           form current approximation to non-linear 
c                    schroedinger equation.
c
c          it is necessary to rescale the solution to reflect the change 
c          of variable from original r to oscillator x.
c
            call smul(work1,work1,norm0,n)
            call htree(ham0,ham,work1,pndvr,work2,eigr,norm0,gamma,n)
            call tonew(ham,work1,tmat,work2,n)
            if(test.ge.crit) then
               call tstcon(obj(1,1),obj(1,2),work2,ham,work1,test,
     1                     type,nobj,n)
               call copy(obj(1,2),obj(1,1),nobj)
               begin=1
            else
               if(drctv) then
                  begin = begin + 1   
                  call mkobj(obj(1,begin),ham,work1,work2,begin,n,
     1                       type,prnt)
                  if(begin.gt.1) then
                     call mkerr(err(1,begin-1),obj(1,begin),
     1                          obj(1,begin-1),begin,nobj,prnt)
                     call diis(work1,work2,obj,err,b,btmp,psi,test,
     1                         cnverg,ipvt,begin-1,nobj,nerr,trunc,
     2                         maxit,prnt,flag)
                     if(flag) then
                        begin=1
                     endif    
                     if(begin.gt.2) then
                        if(type.eq.'fock matrix') then
                           ij=0
                           do 40 i=1,n
                              do 50 j=1,i
                                 ij = ij+1
                                 ham(i,j) = work1(ij)
                                 ham(j,i) = ham(i,j)
 50                           continue
 40                        continue   
                        endif
                     endif            
                  endif
               endif
            endif
            call tred2(n,n,ham,eig,psi,ham)
            call tql2(n,n,eig,psi,ham,ierr)
            call copy(ham(1,1),work1,n)
            if(drctv) then
               error=test
            else
               error=sqrt( (eig0-eig(1))*(eig0-eig(1)) )
            endif
            write(iout,6) iter, eig(1), error
            if(error.le.cnverg) then
               count=count+1
               table(count,1)=natoms
               table(count,2)=eig(1)
               table(count,3)=error
               write(iout,7) iter, natoms, eig(1)
               if(prnt) then
                  title='full spectrum'
                  call prntrm(title,eig,n,1,n,1,iout)
                  title='final wavefunction'
                  call prntrm(title,work1,n,1,n,1,iout)
               endif
               go to 1001
            endif
            eig0=eig(1)   
 10      continue
         write(iout,8) iter
 1001    natoms = natoms + delat
 1000 continue   
      write(iout,60)
      do 2000 i=1,count
         write(iout,70) table(i,1), table(i,2), table(i,3)
 2000 continue   
      return
    1 format(/,5x,'diagonalize time-independent non-linear schroedinger'
     1            ' equation')
    2 format(/,5x,'atomic mass        = ',e15.8,/,5x,
     1            'trap frequency     = ',e15.8,/,5x,
     2            'scattering length  = ',e15.8)
    3 format(/,5x,'maximum number of iterations = ',i4,/,5x,
     1            'convergence criterion        = ',e15.8)
    4 format(/,5x,'number of atoms = ',e15.8)
    5 format(/,5x,'iteration = ',i3,1x,'energy = ',e15.8)
    6 format(/,5x,'iteration = ',i3,1x,'energy = ',e15.8,1x,
     1            'erms = ',e15.8)         
    7 format(/,5x,'converged after ',i4,' iterations',/,5x,
     1            'number of atoms = ',e15.8,1x,'energy = ',e15.8)
    8 format(/5x,'no convergence after ',i4,' iterations')    
 60   format(//,25x,'summary table',//,10x,'number of atoms',
     1           7x,'energy',12x,'convergence')
 70   format(7x,e15.8,5x,e15.8,5x,e15.8)
      end       
