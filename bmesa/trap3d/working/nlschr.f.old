*deck nlschr.f
c***begin prologue     nlschr
c***date written       951229   (yymmdd)
c***revision date      yymmdd   (yymmdd)
c***keywords           non-linear schroedinger equation, gross-pitaevski
c***author             schneider, barry (nsf)
c***source             timeprp
c***purpose            calculate eigenvalues of gross-pitaevski equation
c***                   
c***                   
c***references         
c
c***routines called    
c***end prologue       nlschr
      subroutine nlschr(eig,psi,hpsi,hbuf,ibuf,diag,f,trials,etrial,
     1                  pvec,hpvec,vec,vnl,vnlcur,p1,p2,p3,
     2                  eigr1,eigr2,eigr3,eig01,eig02,eig03,
     3                  u01,u02,u03,b,btmp,hh,pp,ph,hp,sol,
     4                  dvm,dvmtmp,t1,t2,t3,
     4                  table,ipvt,natmin,natmax,norm0,
     5                  u0,scale,todiis,diiscn,cnverg,thresh,n,diiscy,
     6                  diisit,maxit,nroots,ntrials,nstep,number,ndim,
     7                  nd,lenbuf,incore,prnt,drctv,
     8                  itdiag,trunc,diisze,restrt,nrestr)
      implicit integer (a-z)
      real*8 eig, psi, hpsi, hbuf, diag, f, trials, etrial, pvec
      real*8 hpvec, vec, vnl, vnlcur, p1, p2, p3
      real*8 eigr1, eigr2, eigr3, eig01, eig02, eig03
      real*8 u01, u02, u03
      real*8 b, btmp, hh, pp, ph, hp, sol
      real*8 dvm, dvmtmp, t1, t2, t3, table, natmin, natmax, natoms
      real*8 todiis, diiscn, cnverg
      real*8 thresh, error, test
      real*8 gamma, norm0, pi, zero, one, delat
      real*8 eig0, crit, eigtr, scale, iscale, u0, dum, nrestr
      character*80 title
      character*3 itoc
      character*1 it
      character*16 fptoc
      logical drctv, prnt, flag, incore, itdiag, restrt, trunc
      dimension nd(3)
      dimension eig(n), psi(n,*), hpsi(n,*)
      dimension hbuf(*), ibuf(*), diag(*), f(*), trials(*), etrial(*)
      dimension pvec(*), hpvec(*), vec(*), vnl(n,*), vnlcur(*)
      dimension p1(nd(1),0:nd(1)-1), p2(nd(2),0:nd(2)-1)
      dimension p3(nd(3),0:nd(3)-1)
      dimension eigr1(nd(1)), eigr2(nd(2)), eigr3(nd(3))
      dimension eig01(nd(1)), eig02(nd(2)), eig03(nd(3))    
      dimension u01(nd(1),nd(1)), u02(nd(2),nd(2)), u03(nd(3),nd(3))
      dimension b(diisit+1,diisit+1), btmp(diisit+1,diisit+1)
      dimension sol(diisit+1)
      dimension hh(diisit,diisit), pp(diisit,diisit), ph(diisit,diisit)
      dimension hp(diisit,diisit)
      dimension dvm(maxit,maxit), dvmtmp(maxit,maxit)
      dimension t1(*), t2(*), t3(*), table(number,3), ipvt(n)
      common/io/inp, iout
      data pi/3.14159265358979323844d0/
      data zero, one/ 0.d0, 1.d0/
      if(itdiag) then
         it=itoc(ndim)
         call iosys('read integer "'//it//'d number of elements" '//
     1              'from ham',1,nel,0,' ')
      endif
      nobj=n*n
      nerr=nobj
      iscale=1.d0/scale
      write(iout,1)
      write(iout,2) u0
      write(iout,3) diisit, diiscn
      natoms=natmin
      delat=(natmax - natmin)/nstep
      if(restrt) then
         call iosys('read real "wavefunction for '//
     1              'natoms = '//fptoc(nrestr)//'" from lamdat',
     2               n,psi,0,' ')
         call iosys('read real "energy for natoms = '
     1              //fptoc(nrestr)//'" from lamdat',1,
     2                eig(1),0,' ')
         call iosys('read real "potential for '//
     1              'natoms = '//fptoc(nrestr)//'" from lamdat',
     2               n,vnlcur,0,' ')          
      else
         call copy(trials,psi,n)
         eig(1)=etrial(1)
      endif
      count=0
      do 1000 num=1,nstep
         crit = todiis
         test = crit
         gamma=natoms*u0
         gamma=gamma*norm0*norm0
         write(iout,4) natoms, gamma
         write(iout,5) eig(1)/iscale
         eig0=eig(1)
         do 10 cyc=1,diiscy
            begin=1
            do 20 iter=1,diisit
               call potnl(vnl(1,begin),eigr1,eigr2,eigr3,p1,p2,p3,
     1                    psi(1,begin),gamma,n,nd,ndim)
               call fpsi(hbuf,ibuf,diag,vnl(1,begin),psi(1,begin),
     1                   hpsi(1,begin),test,n,nd,lenbuf,nel,ndim,
     2                   incore,itdiag,prnt)
               error=test/iscale
               write(iout,80) iter, error
               call errfac(psi,hpsi,hh,pp,ph,hp,n,begin,diisit)
               if(drctv) then
c
c                     diis procedure when appropriate
c
c                    check current size of diis space and truncate
c                    if that option is turned on.
                     if(begin.gt.diisze) then
                        if(trunc) then
                           call trdiis(vnl,psi,hpsi,b,hh,pp,ph,hp,
     1                                 begin,diisze,n,diisit,prnt)
                           begin=begin-1                           
                        endif
                     endif               
                 if(test.le.crit) then
                     call diis(vnlcur,vnl,psi,hpsi,
     1                         b,btmp,hh,pp,ph,hp,sol,test,
     2                         ipvt,begin,n,diisit,prnt)
c                     error=test/iscale
                  endif
               else
                  call copy(vnl(1,begin),vnlcur,n)
               endif
               begin=begin+1
c
c              diagonalize fock matrix for the current iteration
c              and find the new wavefunction
c
               if(itdiag) then
                  call nldvd(hbuf,ibuf,diag,vnlcur,trials,etrial,
     1                       eig01,eig02,eig03,u01,u02,u03,
     2                       pvec,hpvec,vec,dvm,dvmtmp,vec,
     3                       eig,t1,t2,t3,iscale,cnverg,thresh,nd,
     4                       ndim,n,nroots,ntrials,maxit,lenbuf,
     5                       nel,drctv,incore)
                  call copy(pvec,psi(1,begin),n)
                  call copy(eig,etrial,ntrials)
                  call copy(pvec,trials,n*ntrials)
               else 
                 call newfn(f,hbuf,vnlcur,t1,eig,psi(1,begin),n)
               endif   
               write(iout,6) iter, eig(1)/iscale, error
               if(error.le.diiscn) then
                  eigtr=eig(1)/iscale
                  count=count+1
                  call iosys('write real "wavefunction for '//
     1                       'natoms = '//fptoc(natoms)//'" to lamdat',
     2                        n,psi(1,begin),0,' ')
                  call iosys('write real "energy for natoms = '
     1                        //fptoc(natoms)//'" to lamdat',1,
     2                          eigtr,0,' ')
                  call iosys('write real "potential for '//
     1                       'natoms = '//fptoc(natoms)//'" to lamdat',
     2                        n,vnlcur,0,' ')
                  table(count,1)=natoms
                  table(count,2)=eigtr
                  table(count,3)=error
                  write(iout,7) iter, natoms, eig(1), eigtr
                  if(prnt) then
                     title='full spectrum'
                     call prntfm(title,eig,n,1,n,1,iout)
                     title='final wavefunction'
                     call prntfm(title,t1,n,1,n,1,iout)
                  endif
                  go to 1001
               endif
               eig0=eig(1)
 20         continue
            write(iout,8) cyc, iter
            if(cyc.eq.diiscy) then
               write(iout,9) cyc
               go to 30
            else
               call copy(psi(1,begin),psi,n)   
            endif
 10      continue   
 1001    continue
         natoms = natoms + delat
 1000 continue   
 30   write(iout,60)
      do 2000 i=1,count
         write(iout,70) table(i,1), table(i,2), table(i,3)
 2000 continue   
      return
    1 format(/,5x,'diagonalize time-independent non-linear schroedinger'
     1            ' equation')
    2 format(/,5x,'u0 = ',e15.8)
    3 format(/,5x,'maximum number of diis iterations = ',i4,/,5x,
     1            'diis convergence criterion        = ',e15.8)
    4 format(/,5x,'number of atoms = ',e15.8,/,5x,
     1            'gamma           = ',e15.8)
    5 format(/,5x,'starting approximation',2x,'diis energy = ',e15.8)
    6 format(/,5x,'diis iteration  = ',i3,1x,'diis energy = ',e15.8,
     1       /,5x,'diis rms error = ',e15.8)         
    7 format(/,5x,'converged after ',i4,' diis iterations',/,5x,
     1            'number of atoms = ',e15.8,1x,'energy = ',e15.8,
     2       /,5x,'energy in trap units = ',e15.8)
    8 format(/,5x,'cycle = ',i3,/,5x,
     1            'no convergence after ',i4,' diis iterations')    
 9    format(/,5x,'quit calculation.  no convergence after cycle = ',i3)
 60   format(//,25x,'summary table',//,10x,'number of atoms',
     1           7x,'energy',12x,'convergence')
 70   format(7x,e15.8,5x,e15.8,5x,e15.8)
 80   format(/,5x,'iteration  = ',i3,1x,'rms error = ',e15.8)        
      end       
