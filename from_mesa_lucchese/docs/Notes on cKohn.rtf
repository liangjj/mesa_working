{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red56\green110\blue255;}
\margl1440\margr1440\vieww17180\viewh14840\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf0 I have put the modified version of the complex kohn codes in my dropbox account\
\
\pard\pardeftab720
\cf2 \ul \ulc2 https://www.dropbox.com/s/en6i8f79o78x9y6/ckohn.new.07.08.2014.tgz\cf0 \ulnone \
\
By using 8 byte integers, this version is able to use larger basis sets and do larger CIs in m902.\
\
In the main directory there is a bash script (Makemesa.sh) that compiles all of the mesa and ckohn programs (except for hkohn). \'a0It just runs all of the make files in the various sub directories. \'a0You will notice all of the kohn codes are now in directories that begin with the letter k. \'a0This made writing the script easier. \'a0You can use recent gfortran versions that have the -fdefault-integer-8 flag. \'a0The Makemesa.sh script uses various environment variables that tell the make files which compiler, which options and what BLAS library to use. \'a0The script gets these definitions from a file in the subdirectory ./include where there are a number of examples for different environments. \'a0Makemesa.sh assumes that the environment variable MACH has been defined. \'a0Then when you run\
\
./Makemesa.sh all .gfi8\
\
the script makes the libraries and all programs using the gfortran compiler with 8 byte integers (as indicated by the .gfi8 parameter). \'a0The script will use the file include/$MACH.gfi8.sh to define the appropriate variables. \'a0The period in front of the compiler name is important to the script since that is how it identifies it as being a compiler name rather than a directory with source code. \'a0The compiled programs are then put in a directory bin.gfi8. \'a0Note that the way this is set up you can have compiled versions from different compilers and different options (e.g. i4 or i8) in the directories at the same time. \'a0You will notice that the .a file in the library directory are also uniquely named so that more that one version can be present at the same time. \'a0The script can also be used to compile just the libraries or one program, for example:\
\
./Makemesa.sh clean \'a0(deletes all previously create executable files and libraries)\
./Makemesa.sh lib .gfi8 \'a0(makes the libraries for the gfortran compiler with 8 byte integers)\
./Makemesa.sh one m930 .gfi8 \'a0(makes the m930 program using the gfortran compiler with 8 byte integers)\
\
The different machines that I have used have the following values of MACH\
\
appleAbsoft11 - Mac OS X machines\
intelmkl - Linux with intel ifort version 10\
intelmklb - Linux with intel ifort version 12\
\
the different compilers are\
\
.f77i4 - 4 byte integers using the Absoft fortran compilers\
.f77i8 - 8 byte integers using the Absoft fortran compilers\
.g77 - 4 byte integers using the g77 compiler\
.gfi4 - 4 byte integers using gfortran\
.gfi8 - 8 byte integers using gfortran\
.i4 - 4 byte integers using the intel ifort compiler\
.i8 - 8 byte integers using the intel ifort compiler\
\
You will also notice that in the include files there environment variables that have been defined.  These are then used in the compile scripts to redimension the program.  In the apple.gfi8.sh file, the following parameters are defined:\'a0\
\
export MAXCOR=625000000 # size of blank common in mesa, in integer words (i4 or i8)\
export MAXNBFKOHN=300   # maximum number of basis functions\
export MAXPRIMKOHN=500  # maximum number of gaussian primitives\
export MAXCHAN=20       # maximum number of coupled channels\
export MAXLTOP=10       # maximum asymptotic L\
export MAXLMTOP=40      # maximum number of partial waves (with different l and m) in any channel\
export MAXSMALL=200     # maximum total number of partial waves summed over all channels,\
                        # i.e. size of the asymptotic scattering matrix\
export MAXBIG=3500      # maximum number of partial waves + scattering functions summed over channels\
\
Finally, since some of the routines use the BLAS library, it is prudent to compile the BLAS library with the same compiler and options (e.g. the 8 byte integer option) as is used to compile the programs. \'a0Once you have done this you put the location of the BLAS library in the include file.\
\
Let me know if you have any questions or problems getting this to work for you.\
\
Sincerely,\
Robert\
}