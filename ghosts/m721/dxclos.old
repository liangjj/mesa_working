*deck %W% %G%
      subroutine dxclos(dengrida,dengrada,ga,
     $     fout,itch,phi,grad,lap,scr,slater,becke,lyp,vwn,d,nbf,nnp,
     $     dkay,grdwt,gradwts,ndmat,nat,mxgrd,calce,exc,ngrid,
     $     dmcut,dencut,calc,nzptrs,tmpgwt,eexch,prteexch,queue,tea,
     $     ngb,gblksiz,mxgbsiz,mxgblk,
     $     c,ex,cont,ptprim,noprim,nocont,ptcont,
     $     mxcont,nprim,ntypes,nbtype,ncont,
     $     start,nocart,nobf,maxmom,minmom,mintyp,
     $     nx,ny,nz,xyzgrid,maxl,bigl,charge,grade,accum)
c***begin prologue     %M%
c***date written       930521   (yymmdd)  
c***revision date      %G%
c   may 13, 1994       rlm at lanl
c      modfying kmtxgts(m511) to do derivatives.
c
c***keywords           k matrix coulomb matrix closed shell
c***author             RUSSO, thomas (lanl)
c***source             %W% %G%
c***purpose            to form the k matrix given basis and gradients
c                      on grid, and density matx for the closed shell 
c                      special case
c***description
c     
c    
c
c***references
c
c***routines called
c
c***end prologue       %M%
      implicit none
c     --- input variables -----
      integer ndmat,nat,mxgrd,nnp,nbf,mxgblk,mxgbsiz
      integer nprim,ntypes,nbtype,ncont,mxcont
      real*8 dencut,dmcut
      logical slater,becke,lyp,vwn,calce,prteexch
      character*(*) calc
c     --- input arrays (unmodified) ---
      integer ngrid(nat),ngb(nat),gblksiz(mxgblk,nat)
      integer ptprim(nat,ntypes),noprim(nat,ntypes),nocont(nat,ntypes)
      integer ptcont(nat,ntypes),start(nat,ntypes),nocart(0:*)
      integer nobf(ntypes),maxmom(ntypes),minmom(ntypes),mintyp(ntypes)
      integer nx(*),ny(*),nz(*)
      real*8 c(3,nat),ex(nprim),cont(ncont)
      real*8 xyzgrid(mxgrd,3,nat)
      real*8 d(nnp),exc,eexch,grdwt(mxgrd,nat),gradwts(mxgrd,3,nat,nat)
c     --- input arrays (scratch) ---
      real*8 dengrida(mxgbsiz),dengrada(mxgbsiz,3),
     $     ga(mxgbsiz),
     $     fout(mxgbsiz,*),itch(*),phi(mxgbsiz,nbf),grad(mxgbsiz,nbf,3),
     $     scr(mxgbsiz),lap(mxgbsiz,nbf)
      integer nzptrs(mxgbsiz)
      real*8 tmpgwt(mxgbsiz)
      real*8 queue(mxgbsiz,3),tea(mxgbsiz,nbf),accum(nbf,3)
      integer maxl(nat)
c     --- output arrays ---
      real*8 dkay(nbf,nbf,3)
      real*8 charge(nat)
      real*8 grade(3,nat)
c     --- output variables ---
c     --- scratch arrays ---
c     --- local variables ---
      integer ngtmp,igblk,ioff,ng
      integer rho,zeta,g,h,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11
      integer x,t,omega,delta,iatom,mu,nu,derivs,i,j,k,l,jatom,jtype,ibf
      integer dsq
      integer inp,iout
      integer xyzpow,r,s,tee,rsq
      integer top,ngot,wpadti
      integer bigl,coord
      real*8 zero,half,one,two,four
      real*8 sdot
      real*8 slalph,beckb,lypa,lypb,lypc,lypd
      real*8 dum1,dum2,dum3,dum4,dum5,dum6
      real*8 timbf,timden,timsqz,timfcn,timk
      real*8 g1,g2,g3
      logical timeit
      logical fgrad
c
      data timbf,timden,timsqz,timfcn,timk/5*0.0d+00/
      save timbf,timden,timsqz,timfcn,timk
c
      common /io/ inp,iout
c
      parameter (timeit=.false.)
      parameter (zero=0.0d+00,half=0.5d+00,one=1.0d+00,two=2.0d+00)
      parameter (four=4.0d0)
      parameter (slalph=2.0d0/3.0d0,beckb=0.0042d0,lypa=0.04918d0)
      parameter (lypb=0.132d0,lypc=0.2533d0,lypd=0.349d0)
c
 1010 format(5x,80a1)
c
c     --- does the functional involve gradient terms.
      fgrad=.false.
      if(becke.or.lyp) then
         write(iout,*)' need to form grad'
         fgrad=.true.
      endif

c     --- core allocation within itch
c         note that the space is used by both bfgrd and the functional
c         routines
c         make sure we can really fit in as much as we think
      call getscm(0,itch,ngot,'dxclos',0)
c
c     --- space for bfgrd.
      s=1
      r=s+mxgbsiz*mxcont
      tee=r+mxgbsiz*mxcont
      rsq=tee+mxgbsiz*mxcont
      xyzpow=rsq+mxgbsiz
      top=xyzpow+3*mxgbsiz*bigl
      if(wpadti(top).gt.ngot) then
         write(iout,*) 'need,have',wpadti(top),ngot
         call lnkerr('need more memory in dxclos')
      endif
c
c     --- functional scratch space. can write over bfgrd space.
      t=0
      if (slater) then
c        needs nothing
         top=1
      else if (becke) then
         x=1
         t=x+mxgbsiz
         top=t+4*mxgbsiz
      endif
      if (vwn) then
         x=1
         rho=x+mxgbsiz
         zeta=rho+mxgbsiz
         g=zeta+mxgbsiz
         h=g+mxgbsiz
         t1=h+mxgbsiz
         t2=t1+mxgbsiz
         t3=t2+mxgbsiz
         t4=t3+mxgbsiz
         t5=t4+mxgbsiz
         t6=t5+mxgbsiz
         t7=t6+mxgbsiz
         t8=t7+mxgbsiz
         t9=t8+mxgbsiz
         t10=t9+mxgbsiz
         t11=t10+mxgbsiz
         top=t11+mxgbsiz
      else if (lyp) then
         if (t.eq.0) t=1
         omega=t+mxgbsiz*10
         delta=omega+mxgbsiz
         top=delta+mxgbsiz
      endif
      dsq=top
      top=dsq+nbf*nbf
      if(wpadti(top).gt.ngot) then
         write(iout,*) 'need,have',wpadti(top),ngot
         call lnkerr('need more core in dxclos')
      endif
c     
c     --- loop over atomic grids. this is the main loop for the
c         quadrature.
      call rzero(charge,nat)
      do 10 iatom=1,nat
         ioff=0
         call rzero(dkay,nbf*nbf*3)
         do 15 igblk=1,ngb(iatom)
            ng=gblksiz(igblk,iatom)
c
c           --- compute basis functions on this grid block.
            if(timeit) then
              call timing(dum1,dum2,dum3)
            endif
            call bfgrd2(c,ex,cont,ptprim,noprim,nocont,ptcont,
     $           nat,nprim,ntypes,nbtype,nnp,ncont,
     $           start,nbf,nocart,nobf,maxmom,minmom,mintyp,
     $           nx,ny,nz,xyzgrid(1,1,iatom),mxgrd,
     $           itch(xyzpow),scr,itch(rsq),itch(s),itch(r),
     $           itch(tee),phi,grad,lap,.true.,.true.,mxcont,mxgbsiz,
     $           ng,ioff,maxl)
            if(timeit) then
               call timing(dum4,dum5,dum6)
               timbf=timbf+dum4-dum1
            endif
c
c        --- clear the density and density gradient arrays.
         call rzero(dengrida,mxgbsiz)
         if (fgrad) then
            call rzero(dengrada,mxgbsiz*3)
         endif
c
c        --- form density and gradients on the grid for this atom, 
c            also the gradient invariants.
         if(timeit) then
            call timing(dum1,dum2,dum3)
         endif
         call gridden(nbf,nnp,ng,mxgbsiz,d,phi,grad,
     $                dengrida,dengrada,scr,dmcut,fgrad)
         if(timeit) then
            call timing(dum4,dum5,dum6)
            timden=timden+dum4-dum1
         endif
c
c        --- now we clean the density, and then use nzident to squeeze out 
c            all those values which are zero.  We also need to squeeze the
c            gradient.  once the density's squeezed, squeeze out the grid
c            weights corresponding to zero density points.
         call vclean(dengrida,dencut,ng)
         ngtmp=ng
         call nzident(dengrida,nzptrs,ngtmp)
         if(timeit) then
            call timing(dum1,dum2,dum3)
         endif
         call gthr(dengrida,dengrida,nzptrs,ngtmp)
         do 35 mu=1,nbf
            call gthr(phi(1,mu),phi(1,mu),nzptrs,ngtmp)
            call gthr(grad(1,mu,1),grad(1,mu,1),nzptrs,ngtmp)
            call gthr(grad(1,mu,2),grad(1,mu,2),nzptrs,ngtmp)
            call gthr(grad(1,mu,3),grad(1,mu,3),nzptrs,ngtmp)
            call gthr(lap(1,mu),lap(1,mu),nzptrs,ngtmp)
 35      continue 
         if (fgrad) then
            call gthr(dengrada(1,1),dengrada(1,1),nzptrs,ngtmp)
            call gthr(dengrada(1,2),dengrada(1,2),nzptrs,ngtmp)
            call gthr(dengrada(1,3),dengrada(1,3),nzptrs,ngtmp)
            call vmul(ga,dengrada,dengrada,ngtmp)
            call vwxy(ga,ga,dengrada(1,2),dengrada(1,2),+1,
     $           ngtmp)
            call vwxy(ga,ga,dengrada(1,3),dengrada(1,3),+1,
     $           ngtmp)
            call vclean(ga,dencut,ngtmp)
         endif
         call gthr(tmpgwt,grdwt(ioff+1,iatom),nzptrs,ngtmp)
         if(timeit) then
            call timing(dum4,dum5,dum6) 
            timsqz=timsqz+dum4-dum1
         endif

c
c        --- sum the density to obtain atomic charges ---
         charge(iatom)=charge(iatom)
     $                  +two*sdot(ngtmp,dengrida,1,tmpgwt,1)
         write(iout,*) 'iatom',iatom,' charge=',charge(iatom)
c       goto 15
c
c        --- form functional's derivatives on the grid.
c            fout(*,1)=f(rhoa,rhob,gaa,gbb,gab)
c            fout(*,2)=df/d(rhoa), fout(*,3)=df/d(gaa), 
c            fout(*,4)=df/d(rhob), fout(*,5)=df/d(gbb)
c            fout(*,6)=df/d(gab)
c            both of the exchange functionals clobber the contents 
c            of fout.
         if(timeit) then
            call timing(dum1,dum2,dum3)
         endif
         derivs=-1
         if (calce) derivs=1
c
c        --- exchange pieces ---
         if (slater) then
            call slaterf(ngtmp,mxgbsiz,dengrida,dengrida,slalph,
     $                   derivs,fout)
         else
            call beckef(ngtmp,mxgbsiz,dengrida,dengrida,ga,ga,
     $                 itch(x),itch(t),derivs,beckb,fout,calc,1)
         endif
         if (calce .and. prteexch) then
            eexch=eexch+sdot(ngtmp,tmpgwt,1,fout,1)
         endif
c
c        --- correlation pieces ---
         if (vwn) then
            call vwnf(ngtmp,mxgbsiz,dengrida,dengrida,calc,derivs,
     $                fout,itch(rho),itch(x),itch(zeta),itch(g),
     $                itch(h),itch(t1),itch(t2),itch(t3),itch(t4),
     $                itch(t5),itch(t6),itch(t7),itch(t8),itch(t9),
     $                itch(t10),itch(t11))
         else if (lyp) then
            call rzero(fout(1,6),mxgbsiz)
            call lypf(ngtmp,mxgbsiz,dengrida,dengrida,ga,ga,ga,
     $           itch(omega),itch(delta),itch(t),derivs,lypa,lypb,
     $           lypc,lypd,fout)
         endif
         if (calce) then
            exc=exc+sdot(ngtmp,tmpgwt,1,fout,1)
         endif
         if(timeit) then
            call timing(dum4,dum5,dum6)
            timfcn=timfcn+dum4-dum1
            call timing(dum1,dum2,dum3)
         endif

c
c do the derivative weight trick
c the gradwts aren't gathered yet, but we can do that now:
c
         do 6060 jatom=1,nat
            if (jatom .eq. iatom) goto 6060
            do 6061 coord=1,3
               call gthr(scr,gradwts(ioff+1,coord,jatom,iatom),
     $              nzptrs,ngtmp)
               g1=sdot(ngtmp,fout,1,scr,1)
               grade(coord,jatom)=grade(coord,jatom)+g1
               grade(coord,iatom)=grade(coord,iatom)-g1
 6061       continue 
 6060    continue 
c$$$         write(iout,*)"After deriv weight term, grade:"
c$$$         do 6066 jatom=1,nat
c$$$            write(iout,*)jatom,grade(1,jatom),grade(2,jatom),
c$$$     $           grade(3,jatom)
c$$$ 6066    continue 
c
c        --- now form the "derivative" of the K-matrix.  Sorta.
c
         if(timeit) then
            call timing(dum1,dum2,dum3)
         endif
c        --- first term (independent of whether functional is
c            density gradient dependent)
         call vmul(scr,fout(1,2),tmpgwt,ngtmp)
         do 60 nu=1,nbf
            call vmul(tea(1,nu),scr,phi(1,nu),ngtmp)
   60    continue

         do 70 coord=1,3
            call sgemm('t','n',nbf,nbf,ngtmp,one,grad(1,1,coord),
     $                 mxgbsiz,tea,mxgbsiz,one,dkay(1,1,coord),nbf)
   70    continue
c
c        --- term dependent on gradient corrected functionals.
         if (becke .or. lyp) then
            call vmove(scr,fout(1,3),ngtmp)
            call smul(scr,scr,two,ngtmp)
            if (lyp) call vadd(scr,scr,fout(1,6),ngtmp)
            call vmul(scr,scr,tmpgwt,ngtmp)
            do 100 coord=1,3
               call vmul(queue,scr,dengrada(1,coord),ngtmp)
c
c              --- integrate over the X matrix.
c                  del(phimu)*del(phinu) piece.
               do 90 i=1,3
                  do 80 nu=1,nbf
                     call vmul(tea(1,nu),queue,grad(1,nu,i),
     $                         ngtmp)
   80             continue 
                  call sgemm('t','n',nbf,nbf,ngtmp,one,grad(1,1,i),
     $                       mxgbsiz,tea(1,1),mxgbsiz,one,
     $                       dkay(1,1,coord),nbf)
   90          continue
c              --- phinu*del(del(phimu)) piece. 
               do 800 nu=1,nbf
                  call vmul(tea(1,nu),queue,lap(1,nu),ngtmp)
 800           continue 
               call sgemm('t','n',nbf,nbf,ngtmp,one,phi,mxgbsiz,tea,
     $              mxgbsiz,one,dkay(1,1,coord),nbf)
  100       continue
         endif

         if(timeit) then
            call timing(dum4,dum5,dum6)
            timk=timk+dum4-dum1
         endif
         ioff=ioff+ng
c
c

 15   continue 
c$$$ 1001 format(5x,'the derivative k-matrix')
c$$$ 1011 format(5x,'coordinate:',i3)
c$$$      write(iout,1001)
c$$$      do 1012 coord=1,3
c$$$         write(iout,1011) coord
c$$$         call matout(dkay(1,1,coord),nbf,nbf,nbf,nbf,iout)
c$$$ 1012 continue 
c
c we now have the terms we need to calculate this atom's contribution to 
c the gradient, which is -2*sum(mu')sum(nu) P(mu,nu)DK(mu,nu).  The mu'
c summation is over only the basis functions on the atom for which the 
c gradient is being taken.
c
c we do it in two steps: first do the unrestricted nu summation, then
c do a bunch of restricted mus.  There is a trick: the contribution to 
c del(a)Exc (derivative w.r.t. center A) from grid A are calculated by
c translational invariance, whereas del(b)Exc from grid A are calculated
c as the sum above.
c
         call trtosq(itch(dsq),d,nbf,nnp)
         call fmaccum(itch(dsq),dkay(1,1,1),accum(1,1),nbf)
         call fmaccum(itch(dsq),dkay(1,1,2),accum(1,2),nbf)
         call fmaccum(itch(dsq),dkay(1,1,3),accum(1,3),nbf)
         do 1066 jatom=1,nat
            if (iatom.eq.jatom) goto 1066
            g1=zero
            g2=zero
            g3=zero
            do 1963 jtype=1,nbtype
               if (noprim(jatom,jtype).gt.0) then
                  do 1776 ibf=1,nocont(jatom,jtype)*nobf(jtype)
                     g1=g1-two*accum(ibf+start(jatom,jtype),1)
                     g2=g2-two*accum(ibf+start(jatom,jtype),2)
                     g3=g3-two*accum(ibf+start(jatom,jtype),3)
 1776             continue 
               endif
 1963       continue 
c
c the two is for double occupancy.
c 
            grade(1,jatom)=grade(1,jatom)+two*g1
            grade(2,jatom)=grade(2,jatom)+two*g2
            grade(3,jatom)=grade(3,jatom)+two*g3
            grade(1,iatom)=grade(1,iatom)-two*g1
            grade(2,iatom)=grade(2,iatom)-two*g2
            grade(3,iatom)=grade(3,iatom)-two*g3
 1066    continue 
c$$$         write(iout,*)" After atom ",iatom," contribution, grade:"
c$$$         do 1067 jatom=1,nat
c$$$            write(iout,*)jatom,grade(1,jatom),grade(2,jatom),
c$$$     $           grade(3,jatom)
c$$$ 1067    continue 
 10   continue 
c     
c
      if(timeit) then
         write(iout,*) 'time_bf,time_den,time_sqz,time_fcn,time_k',
     $                  timbf,timden,timsqz,timfcn,timk
      endif
c
c
      return
      end
