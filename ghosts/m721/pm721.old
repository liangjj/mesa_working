*deck %W%  %G%
      subroutine pm721(z,a)
c***begin prologue     %M%
c***date written       940513   (yymmdd)
c***revision date      %G%
c***keywords           m721, link 721, dft, integrals, derivatives, gradient
c***author             martin,richard and russo,thomas(lanl)
c***source             %W%   %G%
c***purpose            computes derivatives of the exchange-correlation
c                      energy
c***description
c***references
c
c***routines called
c***end prologue       %M%
      implicit none
c     --- input variables -----
c     --- input arrays (unmodified) ---
c     --- input arrays (scratch) ---
      integer a(*)
      real*8 z(*)
c     --- output arrays ---
c     --- output variables ---
c     --- scratch arrays ---
c     --- local variables ---
      logical prnt
      logical logkey
      logical slater,becke,lyp,vwn,usesg1
      logical adjust
      logical prteexch,calce
      character*4096 ops
      character*8 prtflg
      character*8 calc,corrf,exchf
      integer inp,iout
      integer nat,nbf,nnp,ndmat,nderiv,nd1e,nd2e
      integer f,d,d2e,grad,dkay,zan,c,top
      integer nprim,ncont,ntypes,nbtype,lenxyz,mxcont
      integer maxl,ptprim,noprim,ptcont,nocont,start
      integer nocart,nobf,minmom,maxmom,mintyp,nx,ny,nz
      integer cont,ex,s,dmat
      integer i,j,ij
      integer intkey,wpadti,iadtwp
      integer multip,nae,nbe,nexch,mxgrd,rmax,lmax
      integer mxgblk,nomega,ian,ngrid,ptrad,radshls,ngb,gblksiz
      integer grid,wts,vwts,rnuc,amu,pwtx,rr,radii,nradial,gradwts
      integer newgrd,iat,jat
      integer canget,nugrd,nuwts,values,valuesi,mxgbsiz,nugwts
      integer charge,bigl 
      integer lebpts(29)
      integer left,dftabs,kleft,dftcore,dfttmp
      real*8 dmcut,defcut,dencut,toosmall
      real*8 exc,eexch
      real*8 fpkey
      real*8 two
c
      parameter (two=2.0d+00)
      parameter (defcut=1.0d-16,toosmall=1.0d-50)
c
      common /io/     inp,iout
c
      data lebpts/2*0,6,5*0,38,0,50,0,74,0,86,0,110,0,146,0,0,0,194,
     $            6*0/
      data prnt/.true./
      save prnt,lebpts
      calce=.true.
c
 1000 format(1x,'m721: exchange-correlation derivatives')
 1010 format (5x,'the exchange-correlation contribution to the scf ',
     $        'gradients:')
 1020 format (5x,'the exchange-correlation contribution to the scf ',
     $       'force constants:')
 1030 format (5x,'the two-electron contribution to the gradients')
 1040 format (5x,'the two-electron contribution to the force'
     $        //' constants')
 1050 format (5x,'the total scf first derivatives:')
 1060 format (5x,'the force-constants less cphf contributions')
 1070 format(5x,'maximum block size',17x,i9)
 1080 format(8x,'grid size; atom',i3,':',16x,i6,2x,i3,' blocks')
c
c     --- collect the options string ---
      call iosys('read character options from rwf',-1,0,0,ops)
c
      call iosys('read character "print flag" from rwf',-1,0,0,prtflg)
      if(prtflg.eq.'minimum') prnt=.false.
c
      if(prnt) then
         write(iout,1000)
      endif
c
c     --- find out how much core is available ---
      call getscm(0,z,canget,'pm721',0)
c
c     --- set up some parameters depending on multip -----
      call iosys('read integer "spin multiplicity" from rwf',
     $           1,multip,0,' ')
      call iosys('read integer "number of alpha electrons" from rwf',
     $           1,nae,0,' ')
      call iosys('read integer "number of beta electrons" from rwf',
     $           1,nbe,0,' ')
      if(multip.eq.1) then
         calc='closed'
         nexch=1
      else
         calc='open'
         nexch=2
      endif
c
c     --- pick a functional set (exchange,correlation)
      slater=logkey(ops,'scf=exchf=slater',.false.,' ')
      becke=logkey(ops,'scf=exchf=becke',.false.,' ')
      lyp=logkey(ops,'scf=corrf=lyp',.false.,' ')
      vwn=logkey(ops,'scf=corrf=vwn',.false.,' ')
      if (becke .and. slater)
     $     call lnkerr('m511: two correlation functionals chosen')
      if (lyp .and. vwn)
     $     call lnkerr('m511: two exchange functionals chosen')
c     --- have to pick at least one, make becke default
      if (.not.(becke .or. slater)) becke=.true.
      if(slater) then
         exchf='slater'
      else if(becke) then
         exchf='becke '
      endif
      if(vwn) then
         corrf='vwn'
      else if(lyp) then
         corrf='lyp'
      else
         corrf='null'
      endif
c
c     --- quadrature options ---
      mxgrd=intkey(ops,'scf=mxgrid',4000,' ')
      rmax=intkey(ops,'scf=radgrid',51,' ')
      lmax=intkey(ops,'scf=lebord',23,' ')
      usesg1=logkey(ops,'scf=sg1',.true.,' ')
      if(usesg1) then
c        for now, sg1 always uses at least 51
         rmax=max(rmax,51)
      endif
      dmcut=fpkey(ops,'scf=denmat-cutoff',defcut,' ')
      dencut=fpkey(ops,'scf=density-cutoff',toosmall,' ')
      mxgblk=intkey(ops,'scf=maxgblk',5,' ')
      adjust=logkey(ops,'scf=adjustcell',.false.,' ')
c
c
c     --- get the lengths of arrays needed for core allocation ---
      call iosys('read integer "number of atoms" from rwf',1,nat,0,' ')
      call iosys('read integer "number of basis functions" from rwf',
     $            1,nbf,0,' ')
      nnp=nbf*(nbf+1)/2
c
c     --- ndmat is the number of density matrices, which is one 
c         less than the number of orbital types
c         virtual orbitals do not contribute. 
      call iosys('read integer "number of hf density matrices" '//
     $           'from rwf',1,ndmat,0,' ')
c
c     --- what order of derivatives are we to do
      nderiv=intkey(ops,'nderiv',1,' ')
      if(logkey(ops,'force-constants',.false.,' ')) then
         if(logkey(ops,'force-constants=numerical',.false.,' ')) then
c           numerical force constants, do nothing
         else
c           analytic force constants
            nderiv=2
         endif 
      endif
      if(nderiv.gt.1) then
         call lnkerr('second derivatives not yet implemented')
      endif
c
c
      nd1e=3*nat
      nd2e=nd1e*(nd1e+1)/2
c
c     --- allocate some core ---
      f=1
      d=f+ndmat+1
      d2e=d+nnp
      if (nderiv.eq.1) then
         grad=d2e
      else if (nderiv.eq.2) then
         grad=d2e+nd2e
      end if
      dkay=grad+3*nat
      charge=dkay+3*nexch*nbf*nbf
      zan=charge+nat
      c=zan+nat
      top=wpadti(c+3*nat)
c
c     --- retrieve basis set information; returns pointers as well.
      call iosys('read real "nuclear charges" from rwf',
     $           -1,z(zan),0,' ')
      call iosys('read real coordinates from rwf',-1,z(c),0,' ')
      call basis(nat,nbf,nprim,ncont,ntypes,nbtype,lenxyz,
     $           mxcont,maxl,ptprim,noprim,ptcont,nocont,start,
     $           nocart,nobf,minmom,maxmom,mintyp,nx,ny,nz,
     $           cont,ex,top,z,a)
c
c     --- generate grid points and weights ---
      if (lmax.lt.3 .or. lmax.gt.29)
     $     call lnkerr('m721: invalid lebedev order requested')
      nomega=lebpts(lmax)
      if (nomega.eq.0)
     $     call lnkerr('m721: invalid lebedev order requested')
c
c     --- mxgrd is defaulted to a typical standard grid size.  
      mxgrd=max(mxgrd,(rmax-1)*nomega)

c
c     --- allocate more core
      ian=top
      ngrid=ian+nat
      ptrad=ngrid+nat
      radshls=ptrad+rmax*nat
      ngb=radshls+nat
      gblksiz=ngb+nat
      grid=iadtwp(gblksiz+mxgblk*nat)
      wts=grid+3*mxgrd*nat
      gradwts=wts+mxgrd*nat
      vwts=gradwts+mxgrd*3*nat*nat
      rnuc=vwts+mxgrd*nat
      amu=rnuc+nat*nat
      pwtx=amu+nat*nat
      rr=pwtx+nat
      radii=rr+nat
      top=wpadti(radii+nat)
      if (top .gt. canget) then
         write(iout,*) 'top,canget',top,canget
         call lnkerr('m511: not enough core for mkgrid')
      endif
c     trash everything from vwts on when mkgrid returns      
      top=wpadti(vwts)
      call iosys('read integer "atomic numbers" from rwf',
     $            -1,a(ian),0,' ')
      call mkgrid2(z(c),a(ian),z(grid),z(wts),rmax,lmax,nomega,
     $            nradial,nat,a(ngrid),mxgrd,z(vwts),z(rnuc),z(amu),
     $            z(pwtx),z(rr),adjust,z(radii),usesg1,
     $            a(radshls),a(ptrad),.true.,z(gradwts))
c      write(iout,*)" Here are the gradients of the grid weights:"
c      call dumpgwt(z(gradwts),mxgrd,nat)
c
c     --- redefine mxgrd to be the largest atomic grid generated 
c         this is useful since standard grids may have used less
c         than expected from the default radial and angular orders. 
      newgrd=0
      do 100 iat=1,nat
         newgrd=max(newgrd,a(ngrid+iat-1))
  100 continue
c     pack the points and weights arrays into (newgrd,3,nat),etc.
c     and redefine pointers
      nugrd=iadtwp(top)
      nuwts=nugrd+3*newgrd*nat
      nugwts=nuwts+newgrd*nat
      if (nugwts+newgrd*3*nat*nat .gt. canget) then
         write(iout,*)'need ',nugwts+newgrd*3*nat*nat,' canget ',canget
         call lnkerr('m721: need more core')
      endif
      if(newgrd.lt.mxgrd) then
         call pakgrd(z(grid),z(wts),mxgrd,z(nugrd),z(nuwts),newgrd,
     $               nat)
         call pakgwt(z(gradwts),z(nugwts),mxgrd,newgrd,nat)
         wts=grid+3*newgrd*nat
         gradwts=wts+newgrd*nat
         top=wpadti(gradwts+newgrd*3*nat*nat)
         call vmove(z(grid),z(nugrd),newgrd*3*nat)
         call vmove(z(wts),z(nuwts),newgrd*nat)
         call vmove(z(gradwts),z(nugwts),newgrd*3*nat*nat)
         mxgrd=newgrd
      endif
c
      valuesi=top
      values=iadtwp(valuesi)
      left=iadtwp(canget)-values
c
c     --- finally we know how much we'll have left for kmatrix.
c         for these derivatives, the gradient of the basis functions
c         is always needed.  THIS IS NOT RIGHT
c     --- increment maxl by 1 for gradients, 2 for laplacian
      bigl=max(maxl+2,2)
c     it needs some arrays that are independent of the grid.
      if(calc.eq.'closed') then
c        (nnp for dtmp, nnp for ktmp, nbf*nbf for kay )
         dftabs=2*nnp+nbf*nbf
      else if (calc.eq.'open') then      
c        there are 3*nnp, two for dtmp one for ktmp.  nbf**2 for kay
         dftabs=3*nnp+nbf*nbf
      endif
      kleft=left-dftabs
c     --- the remaining core is used to hold arrays which depend
c         on the grid size. we are going to determine the largest
c         grid block we can handle with the available memory to 
c         ensure we can run in the amount of space provided.
c         this means we need to know how much space we need
c         PER GRID POINT. this is given by dftcore
c
      if(calc.eq.'closed') then
c        dengrida
         dftcore=1
c        fout
         dftcore=dftcore+5 
         if(lyp) then
c           fout needs an extra one
            dftcore=dftcore+1
         endif
c        becke/lyp needs even more
         if(becke.or.lyp) then
c           dengrada,ga,queue
            dftcore=dftcore+3+1+3
         endif
      else if(calc.eq.'open') then
c        dengrida,dengridb
         dftcore=2
c        fout
         dftcore=dftcore+5 
         if(lyp) then
            dftcore=dftcore+1
         endif
c        becke/lyp needs even more
         if(becke.or.lyp) then
c           dengrada,dengradb,ga,gb,queue
            dftcore=dftcore+3+3+1+1+3
            if(lyp) then
c              gab
               dftcore=dftcore+1
            endif
         endif
      endif
c     both open/closed need
c     phi,grad,scr,scr2,tea,tmpgwt,nzptrs(treat this as if were a real*8
c                                         array for now)
      dftcore=dftcore+nbf+3*nbf+1+1+nbf+1+1
c
c     --- this takes us up to the beginning of itch in kmatrix.
c         the functionals (except slater) need some scratch space
      dfttmp=0
      if (becke) dfttmp=5
      if (vwn) then
         dfttmp=max(dfttmp,16)
      else if (lyp) then
         dfttmp=max(dfttmp,12)
      endif
c     direct k need some core too
      dfttmp=max(dfttmp,1+2*mxcont+3*bigl)
c
c     ta da..... this is how much room we need PER GRID POINT
      dftcore=dftcore+dfttmp
c
c     --- finally, determine the maximum block size which will fit
      mxgbsiz=kleft/dftcore
c
c     let user override, to avoid using all the memory there is and 
c     choking the machine, but only to DECREASE it, not to increase it.
      mxgbsiz=min(intkey(ops,'scf=mxgbsiz',mxgbsiz,' '),mxgbsiz)
      mxgbsiz=min(mxgrd,mxgbsiz)
      write(iout,1070) mxgbsiz
c
c     --- now that we know the size of a grid block, let's see how 
c         many grid blocks we need for each atom
c         ngb(iatom) will have number of grid blocks for atom iatom, 
c         gblksiz(block,iatom) gives number of grid points for block
c         in iatom.
      call gblk(nat,mxgbsiz,mxgblk,a(ngrid),a(ngb),a(gblksiz))
      do 120 iat=1,nat
         write(iout,1080) iat,a(ngrid+iat-1),a(ngb+iat-1)
 120  continue 
c
c     --- pick up the density matrices
c      call rzero(z(d),nnp)
      call iosys('read real f from rwf',ndmat+1,z(f),0,' ')
      call iosys('read real "hf density matrix" from rwf ',
     $            nnp,z(d),0,' ')
c      call saxpy(nnp,two,z(values),1,z(d),1)
c      if(ndmat.eq.2) then
c         call vadd(z(d),z(d),z(values+nnp),nnp)
c      endif
c         do 10 i=1,nnp
c            z(d+i-1)=z(d+i-1)+2.0d+00*z(f+dmat-1)*z(values+i-1)
c   10   continue
c   20 continue
c
c     --- double off-diagonals of density to account for 
c         dij and dji -----
c      ij=0
c      do 40 i=1,nbf
c         do 30 j=1,i-1
c            ij=ij+1
c            z(d+ij-1)=z(d+ij-1)*2.0d+00
c   30    continue
c         ij=ij+1
c   40 continue
c
c
c     --- calculate derivative exchange-correlation integrals ---
c         and the contribution to the Exc gradient
c
      write(iout,*) 'nprim',nprim
      call dxcint(z(values),z(d),nbf,nnp,z(dkay),nexch,z(wts),
     $            ndmat,nat,mxgrd,a(ngrid),exc,slater,becke,lyp,vwn,
     $            calce,calc,dmcut,dencut,eexch,prteexch,a(ngb),
     $            a(gblksiz),mxgblk,mxgbsiz,a(valuesi),
     $            z(c),z(ex),z(cont),a(ptprim),a(noprim),
     $            a(nocont),a(ptcont),mxcont,nprim,
     $            ntypes,nbtype,ncont,a(start),
     $            a(nocart),a(nobf),a(maxmom),a(minmom),a(mintyp),
     $            a(nx),a(ny),a(nz),z(grid),z(charge),bigl,
     $            ops,nderiv,z(grad),z(gradwts))
c
c     --- determine contribution to the gradient ---
c      call dxcatm(a(nocont),nat,ntypes,nbtype,nnp,a(start),
c     $            nbf,a(nobf),ops,nderiv,z(grad),z(d),z(dkay),ndmat,
c     $            z(d2e),nd2e,nd1e)
c
c     --- store these contributions on the rwf ---
      call iosys('write real "xc integral derivatives" to rwf',
     $           3*nat,z(grad),0,' ')
      if(nderiv.eq.2) then
         call iosys('write real "xc integral force constants"'
     $             //' to rwf',nd2e,z(d2e),0,' ')
      endif
c
c     --- print gradient contributions and form total gradient ---
      if (logkey(ops,'print=gradient=xc',.false.,' ')) then
         write (iout,1010)
         call matout(z(grad),3,nat,3,nat,iout)
         if (nderiv.eq.2) then
            write (iout,1020)
            call print(z(d2e),nd2e,nd1e,iout)
         end if
      end if
c
c     --- form total two-electron gradient ---
      call iosys('read real "coulomb integral derivatives" from rwf',
     $           3*nat,z(zan),0,' ')
      call vadd(z(grad),z(grad),z(zan),3*nat)
      if(nderiv.eq.2) then
         call iosys('read "coulomb integral force constants"'
     $             //' from rwf',nd2e,z(zan),0,' ')
         call vadd(z(d2e),z(d2e),z(zan),nd2e)
      endif
c
      if (logkey(ops,'print=gradient=two-electron',.false.,' ')) then
         write (iout,1030)
         call matout(z(grad),3,nat,3,nat,iout)
         if (nderiv.ge.2) then
            write (iout,1040)
            call print(z(d2e),nd2e,nd1e,iout)
         end if
      end if
c
c     --- form total gradients ---
      call iosys('read real "one-electron derivatives" from rwf',
     $     3*nat,z(zan),0,' ')
      call vadd(z(grad),z(grad),z(zan),3*nat)
      if (nderiv.ge.2) then
         call iosys('read real "one-electron force-constants" from rwf',
     $               nd2e,z(zan),0,' ')
         call vadd(z(d2e),z(d2e),z(zan),nd2e)
      end if
c
      if (logkey(ops,'print=gradient=total',.false.,' ')) then
         write (iout,1050)
         call matout(z(grad),3,nat,3,nat,iout)
         if (nderiv.ge.2) then
            write (iout,1060)
            call print(z(d2e),nd2e,nd1e,iout)
         end if
      end if
c
c     --- save the gradients to the rwf ---
      call iosys('write real "hf first derivatives" to rwf',
     $            3*nat,z(grad),0,' ')
      call iosys('write real "cartesian first derivatives" to rwf',
     $            3*nat,z(grad),0,' ')
      if (nderiv.ge.2) then
         call iosys('write real "integral force constants" to rwf',
     $               nd2e,z(d2e),0,' ')
      end if
c
c     --- and exit gracefully ---
      call chainx(0)
c
c
      return
      end

      subroutine pakgwt(old,new,ogrd,ngrd,nat)
      implicit none
      integer ogrd,ngrd,nat
      real*8 old(ogrd,3,nat,nat),new(ngrd,3,nat,nat)
      integer i,j,k

      do 1 i=1,nat
         do 2 j=1,nat
            do 3 k=1,3
               call vmove(new(1,k,j,i),old(1,k,j,i),ngrd)
 3          continue 
 2       continue 
 1    continue 

      return
      end

      subroutine dumpgwt(gwts,mxgrd,nat)
      implicit none
      integer mxgrd,nat,i,j,k,l,iout
      real*8 gwts(mxgrd,3,nat,nat)

      iout=9
      do 1 k=1,nat
         write(iout,*)" Atom ",k," grid:"
         do 2 j=1,nat
            write(iout,*)"   deriv w.r.t. atom ",j
               do 4 l=1,mxgrd
                  write(iout,*)"        ",l,(gwts(l,i,j,k),i=1,3)
 4             continue 
 3          continue 
 2       continue 
 1    continue 
      return
      end
