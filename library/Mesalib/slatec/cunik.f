*deck cunik
      subroutine cunik (zr, fnu, ikflg, ipmtr, tol, init, phi, zeta1,
     +   zeta2, sum, cwrk)
c***begin prologue  cunik
c***subsidiary
c***purpose  subsidiary to cbesi and cbesk
c***library   slatec
c***type      all (cunik-a, zunik-a)
c***author  amos, d. e., (snl)
c***description
c
c        cunik computes parameters for the uniform asymptotic
c        expansions of the i and k functions on ikflg= 1 or 2
c        respectively by
c
c        w(fnu,zr) = phi*exp(zeta)*sum
c
c        where       zeta=-zeta1 + zeta2       or
c                          zeta1 - zeta2
c
c        the first call must have init=0. subsequent calls with the
c        same zr and fnu will return the i or k function on ikflg=
c        1 or 2 with no change in init. cwrk is a complex work
c        array. ipmtr=0 computes all parameters. ipmtr=1 computes phi,
c        zeta1,zeta2.
c
c***see also  cbesi, cbesk
c***routines called  r1mach
c***revision history  (yymmdd)
c   830501  date written
c   910415  prologue converted to version 4.0 format.  (bab)
c***end prologue  cunik
      complex cfn, con, cone, crfn, cwrk, czero, phi, s, sr, sum, t,
     * t2, zeta1, zeta2, zn, zr
      real ac, c, fnu, rfn, test, tol, tstr, tsti, r1mach
      integer i, ikflg, init, ipmtr, j, k, l
      dimension c(120), cwrk(16), con(2)
      data czero, cone / (0.0e0,0.0e0), (1.0e0,0.0e0) /
      data con(1), con(2)  /
     1(3.98942280401432678e-01,0.0e0),(1.25331413731550025e+00,0.0e0)/
      data c(1), c(2), c(3), c(4), c(5), c(6), c(7), c(8), c(9), c(10),
     1     c(11), c(12), c(13), c(14), c(15), c(16), c(17), c(18),
     2     c(19), c(20), c(21), c(22), c(23), c(24)/
     3     1.00000000000000000e+00,    -2.08333333333333333e-01,
     4     1.25000000000000000e-01,     3.34201388888888889e-01,
     5    -4.01041666666666667e-01,     7.03125000000000000e-02,
     6    -1.02581259645061728e+00,     1.84646267361111111e+00,
     7    -8.91210937500000000e-01,     7.32421875000000000e-02,
     8     4.66958442342624743e+00,    -1.12070026162229938e+01,
     9     8.78912353515625000e+00,    -2.36408691406250000e+00,
     a     1.12152099609375000e-01,    -2.82120725582002449e+01,
     b     8.46362176746007346e+01,    -9.18182415432400174e+01,
     c     4.25349987453884549e+01,    -7.36879435947963170e+00,
     d     2.27108001708984375e-01,     2.12570130039217123e+02,
     e    -7.65252468141181642e+02,     1.05999045252799988e+03/
      data c(25), c(26), c(27), c(28), c(29), c(30), c(31), c(32),
     1     c(33), c(34), c(35), c(36), c(37), c(38), c(39), c(40),
     2     c(41), c(42), c(43), c(44), c(45), c(46), c(47), c(48)/
     3    -6.99579627376132541e+02,     2.18190511744211590e+02,
     4    -2.64914304869515555e+01,     5.72501420974731445e-01,
     5    -1.91945766231840700e+03,     8.06172218173730938e+03,
     6    -1.35865500064341374e+04,     1.16553933368645332e+04,
     7    -5.30564697861340311e+03,     1.20090291321635246e+03,
     8    -1.08090919788394656e+02,     1.72772750258445740e+00,
     9     2.02042913309661486e+04,    -9.69805983886375135e+04,
     a     1.92547001232531532e+05,    -2.03400177280415534e+05,
     b     1.22200464983017460e+05,    -4.11926549688975513e+04,
     c     7.10951430248936372e+03,    -4.93915304773088012e+02,
     d     6.07404200127348304e+00,    -2.42919187900551333e+05,
     e     1.31176361466297720e+06,    -2.99801591853810675e+06/
      data c(49), c(50), c(51), c(52), c(53), c(54), c(55), c(56),
     1     c(57), c(58), c(59), c(60), c(61), c(62), c(63), c(64),
     2     c(65), c(66), c(67), c(68), c(69), c(70), c(71), c(72)/
     3     3.76327129765640400e+06,    -2.81356322658653411e+06,
     4     1.26836527332162478e+06,    -3.31645172484563578e+05,
     5     4.52187689813627263e+04,    -2.49983048181120962e+03,
     6     2.43805296995560639e+01,     3.28446985307203782e+06,
     7    -1.97068191184322269e+07,     5.09526024926646422e+07,
     8    -7.41051482115326577e+07,     6.63445122747290267e+07,
     9    -3.75671766607633513e+07,     1.32887671664218183e+07,
     a    -2.78561812808645469e+06,     3.08186404612662398e+05,
     b    -1.38860897537170405e+04,     1.10017140269246738e+02,
     c    -4.93292536645099620e+07,     3.25573074185765749e+08,
     d    -9.39462359681578403e+08,     1.55359689957058006e+09,
     e    -1.62108055210833708e+09,     1.10684281682301447e+09/
      data c(73), c(74), c(75), c(76), c(77), c(78), c(79), c(80),
     1     c(81), c(82), c(83), c(84), c(85), c(86), c(87), c(88),
     2     c(89), c(90), c(91), c(92), c(93), c(94), c(95), c(96)/
     3    -4.95889784275030309e+08,     1.42062907797533095e+08,
     4    -2.44740627257387285e+07,     2.24376817792244943e+06,
     5    -8.40054336030240853e+04,     5.51335896122020586e+02,
     6     8.14789096118312115e+08,    -5.86648149205184723e+09,
     7     1.86882075092958249e+10,    -3.46320433881587779e+10,
     8     4.12801855797539740e+10,    -3.30265997498007231e+10,
     9     1.79542137311556001e+10,    -6.56329379261928433e+09,
     a     1.55927986487925751e+09,    -2.25105661889415278e+08,
     b     1.73951075539781645e+07,    -5.49842327572288687e+05,
     c     3.03809051092238427e+03,    -1.46792612476956167e+10,
     d     1.14498237732025810e+11,    -3.99096175224466498e+11,
     e     8.19218669548577329e+11,    -1.09837515608122331e+12/
      data c(97), c(98), c(99), c(100), c(101), c(102), c(103), c(104),
     1     c(105), c(106), c(107), c(108), c(109), c(110), c(111),
     2     c(112), c(113), c(114), c(115), c(116), c(117), c(118)/
     3     1.00815810686538209e+12,    -6.45364869245376503e+11,
     4     2.87900649906150589e+11,    -8.78670721780232657e+10,
     5     1.76347306068349694e+10,    -2.16716498322379509e+09,
     6     1.43157876718888981e+08,    -3.87183344257261262e+06,
     7     1.82577554742931747e+04,     2.86464035717679043e+11,
     8    -2.40629790002850396e+12,     9.10934118523989896e+12,
     9    -2.05168994109344374e+13,     3.05651255199353206e+13,
     a    -3.16670885847851584e+13,     2.33483640445818409e+13,
     b    -1.23204913055982872e+13,     4.61272578084913197e+12,
     c    -1.19655288019618160e+12,     2.05914503232410016e+11,
     d    -2.18229277575292237e+10,     1.24700929351271032e+09/
      data c(119), c(120)/
     1    -2.91883881222208134e+07,     1.18838426256783253e+05/
c***first executable statement  cunik
      if (init.ne.0) go to 40
c-----------------------------------------------------------------------
c     initialize all variables
c-----------------------------------------------------------------------
      rfn = 1.0e0/fnu
      crfn = cmplx(rfn,0.0e0)
c     t = zr*crfn
c-----------------------------------------------------------------------
c     overflow test (zr/fnu too small)
c-----------------------------------------------------------------------
      tstr = real(zr)
      tsti = aimag(zr)
      test = r1mach(1)*1.0e+3
      ac = fnu*test
      if (abs(tstr).gt.ac .or. abs(tsti).gt.ac) go to 15
      ac = 2.0e0*abs(alog(test))+fnu
      zeta1 = cmplx(ac,0.0e0)
      zeta2 = cmplx(fnu,0.0e0)
      phi=cone
      return
   15 continue
      t=zr*crfn
      s = cone + t*t
      sr = csqrt(s)
      cfn = cmplx(fnu,0.0e0)
      zn = (cone+sr)/t
      zeta1 = cfn*clog(zn)
      zeta2 = cfn*sr
      t = cone/sr
      sr = t*crfn
      cwrk(16) = csqrt(sr)
      phi = cwrk(16)*con(ikflg)
      if (ipmtr.ne.0) return
      t2 = cone/s
      cwrk(1) = cone
      crfn = cone
      ac = 1.0e0
      l = 1
      do 20 k=2,15
        s = czero
        do 10 j=1,k
          l = l + 1
          s = s*t2 + cmplx(c(l),0.0e0)
   10   continue
        crfn = crfn*sr
        cwrk(k) = crfn*s
        ac = ac*rfn
        tstr = real(cwrk(k))
        tsti = aimag(cwrk(k))
        test = abs(tstr) + abs(tsti)
        if (ac.lt.tol .and. test.lt.tol) go to 30
   20 continue
      k = 15
   30 continue
      init = k
   40 continue
      if (ikflg.eq.2) go to 60
c-----------------------------------------------------------------------
c     compute sum for the i function
c-----------------------------------------------------------------------
      s = czero
      do 50 i=1,init
        s = s + cwrk(i)
   50 continue
      sum = s
      phi = cwrk(16)*con(1)
      return
   60 continue
c-----------------------------------------------------------------------
c     compute sum for the k function
c-----------------------------------------------------------------------
      s = czero
      t = cone
      do 70 i=1,init
        s = s + t*cwrk(i)
        t = -t
   70 continue
      sum = s
      phi = cwrk(16)*con(2)
      return
      end
