*deck dpsixn
      double precision function dpsixn (n)
c***begin prologue  dpsixn
c***subsidiary
c***purpose  subsidiary to dexint
c***library   slatec
c***type      double precision (psixn-s, dpsixn-d)
c***author  amos, d. e., (snla)
c***description
c
c     this subroutine returns values of psi(x)=derivative of log
c     gamma(x), x.gt.0.0 at integer arguments. a table look-up is
c     performed for n .le. 100, and the asymptotic expansion is
c     evaluated for n.gt.100.
c
c***see also  dexint
c***routines called  d1mach
c***revision history  (yymmdd)
c   800501  date written
c   890531  changed all specific intrinsics to generic.  (wrb)
c   890911  removed unnecessary intrinsics.  (wrb)
c   891214  prologue converted to version 4.0 format.  (bab)
c   900328  added type section.  (wrb)
c   910722  updated author section.  (als)
c***end prologue  dpsixn
c
      integer n, k
      double precision ax, b, c, fn, rfn2, trm, s, wdtol
      double precision d1mach
      dimension b(6), c(100)
c
c             dpsixn(n), n = 1,100
      data c(1), c(2), c(3), c(4), c(5), c(6), c(7), c(8), c(9), c(10),
     1     c(11), c(12), c(13), c(14), c(15), c(16), c(17), c(18),
     2     c(19), c(20), c(21), c(22), c(23), c(24)/
     3    -5.77215664901532861d-01,     4.22784335098467139d-01,
     4     9.22784335098467139d-01,     1.25611766843180047d+00,
     5     1.50611766843180047d+00,     1.70611766843180047d+00,
     6     1.87278433509846714d+00,     2.01564147795561000d+00,
     7     2.14064147795561000d+00,     2.25175258906672111d+00,
     8     2.35175258906672111d+00,     2.44266167997581202d+00,
     9     2.52599501330914535d+00,     2.60291809023222227d+00,
     1     2.67434666166079370d+00,     2.74101332832746037d+00,
     2     2.80351332832746037d+00,     2.86233685773922507d+00,
     3     2.91789241329478063d+00,     2.97052399224214905d+00,
     4     3.02052399224214905d+00,     3.06814303986119667d+00,
     5     3.11359758531574212d+00,     3.15707584618530734d+00/
      data c(25), c(26), c(27), c(28), c(29), c(30), c(31), c(32),
     1     c(33), c(34), c(35), c(36), c(37), c(38), c(39), c(40),
     2     c(41), c(42), c(43), c(44), c(45), c(46), c(47), c(48)/
     3     3.19874251285197401d+00,     3.23874251285197401d+00,
     4     3.27720405131351247d+00,     3.31424108835054951d+00,
     5     3.34995537406483522d+00,     3.38443813268552488d+00,
     6     3.41777146601885821d+00,     3.45002953053498724d+00,
     7     3.48127953053498724d+00,     3.51158256083801755d+00,
     8     3.54099432554389990d+00,     3.56956575411532847d+00,
     9     3.59734353189310625d+00,     3.62437055892013327d+00,
     1     3.65068634839381748d+00,     3.67632737403484313d+00,
     2     3.70132737403484313d+00,     3.72571761793728215d+00,
     3     3.74952714174680596d+00,     3.77278295570029433d+00,
     4     3.79551022842756706d+00,     3.81773245064978928d+00,
     5     3.83947158108457189d+00,     3.86074817682925274d+00/
      data c(49), c(50), c(51), c(52), c(53), c(54), c(55), c(56),
     1     c(57), c(58), c(59), c(60), c(61), c(62), c(63), c(64),
     2     c(65), c(66), c(67), c(68), c(69), c(70), c(71), c(72)/
     3     3.88158151016258607d+00,     3.90198967342789220d+00,
     4     3.92198967342789220d+00,     3.94159751656514710d+00,
     5     3.96082828579591633d+00,     3.97969621032421822d+00,
     6     3.99821472884273674d+00,     4.01639654702455492d+00,
     7     4.03425368988169777d+00,     4.05179754953082058d+00,
     8     4.06903892884116541d+00,     4.08598808138353829d+00,
     9     4.10265474805020496d+00,     4.11904819067315578d+00,
     1     4.13517722293122029d+00,     4.15105023880423617d+00,
     2     4.16667523880423617d+00,     4.18205985418885155d+00,
     3     4.19721136934036670d+00,     4.21213674247469506d+00,
     4     4.22684262482763624d+00,     4.24133537845082464d+00,
     5     4.25562109273653893d+00,     4.26970559977879245d+00/
      data c(73), c(74), c(75), c(76), c(77), c(78), c(79), c(80),
     1     c(81), c(82), c(83), c(84), c(85), c(86), c(87), c(88),
     2     c(89), c(90), c(91), c(92), c(93), c(94), c(95), c(96)/
     3     4.28359448866768134d+00,     4.29729311880466764d+00,
     4     4.31080663231818115d+00,     4.32413996565151449d+00,
     5     4.33729786038835659d+00,     4.35028487337536958d+00,
     6     4.36310538619588240d+00,     4.37576361404398366d+00,
     7     4.38826361404398366d+00,     4.40060929305632934d+00,
     8     4.41280441500754886d+00,     4.42485260777863319d+00,
     9     4.43675736968339510d+00,     4.44852207556574804d+00,
     1     4.46014998254249223d+00,     4.47164423541605544d+00,
     2     4.48300787177969181d+00,     4.49424382683587158d+00,
     3     4.50535493794698269d+00,     4.51634394893599368d+00,
     4     4.52721351415338499d+00,     4.53796620232542800d+00,
     5     4.54860450019776842d+00,     4.55913081598724211d+00/
      data c(97), c(98), c(99), c(100)/
     1     4.56954748265390877d+00,     4.57985676100442424d+00,
     2     4.59006084263707730d+00,     4.60016185273808740d+00/
c             coefficients of asymptotic expansion
      data b(1), b(2), b(3), b(4), b(5), b(6)/
     1     8.33333333333333333d-02,    -8.33333333333333333d-03,
     2     3.96825396825396825d-03,    -4.16666666666666666d-03,
     3     7.57575757575757576d-03,    -2.10927960927960928d-02/
c
c***first executable statement  dpsixn
      if (n.gt.100) go to 10
      dpsixn = c(n)
      return
   10 continue
      wdtol = max(d1mach(4),1.0d-18)
      fn = n
      ax = 1.0d0
      s = -0.5d0/fn
      if (abs(s).le.wdtol) go to 30
      rfn2 = 1.0d0/(fn*fn)
      do 20 k=1,6
        ax = ax*rfn2
        trm = -b(k)*ax
        if (abs(trm).lt.wdtol) go to 30
        s = s + trm
   20 continue
   30 continue
      dpsixn = s + log(fn)
      return
      end
