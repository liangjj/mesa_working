*deck @(#)m4001.f	5.1 11/6/94
      program m4001
c     a program using the ewald method to compute madelung constants
c     and electrostatic energy. input cards are as follows.
c  1. a title card in format 20a4. the program will stop if the
c     first byte of this card is empty.
c  2. cell parameters a, b, c, alpha, beta, gamma in angstroms and
c     degrees. format 6f12.8.
c  3. a card in format e10.2 giving the error tolerated in the
c     madelung constants.
c  4. ncell, molpc, and lsym, the numbers of atoms in the asymm. unit,
c     formula units per cell, and generators in the space group.
c     for p1, lsym=0. format 3i3.
c  5. ncell cards, one for each symmetry indep. atom. these contain
c     the atom name, the fractional coordinates, the charge, and a
c     number rmult. for symmetry independent atoms, rmult is the
c     equipoint rank number of the atom. symmetry dependent atoms have
c     rmult equal to zero. the energies thus computed apply to one
c     formula unit. the format of these cards is a4,5f12.8.
c  6. 4*lsym cards, four for each generator of the space group.
c     these list sx,sy,sz, and t corresponding to x(card 1),
c     y(card 2) and z(card 3). coordinates of new symmetry
c     dependent atoms are computed by the formula
c     x' = sx*x + sy*y + sz*z + t
c     and similarly for y' and z'. the format of these cards is
c     4f12.8. if lsym = 0 , no such cards should be included.
c     the fourth card in this set is in format i1 and is
c     the order of the generator. generators should be input
c     in an order such that no power of a generator is contained
c     in the group generated by the previous generators.
c     multiple data sets can be submitted sequentially. the last data
c     set should be followed by a blank card.
c     present size of the program is 1000 atoms per cell. although all
c     portions of the program requiring high accuracy are done double
c     precision, very high accuracy calculations (e.g., madelung
c     constants to more than 6 places) should be done by rewriting
c     the program to be entirely double precision.
c     t.j. mclarnan, 1/7/82.
      real*8 pi,alpha,beta,gamma,si,psia,psi2,ae,dcos
     1,dsin,dtan,derfc,dexp,dsqrt,psib,psi,ar0,dble
      dimension x(1000),y(1000),z(1000)
      character*80 label
      common/csymm/ax(1000),ay(1000),az(1000),q(1000),
     1rmult(1000),lsym,ncell,name(1000)
      data pi/3.1415926535897d0/
      call cogen
    1 read(5,1030)label
 1030 format(a80)
      if(label(1:4).eq.'    ')go to 2000
      write(6,1031)label
 1031 format(1h1,a80)
      write(6,1032)
 1032 format(1h0,35x,'cell parameters'/5x,'a',11x,'b',11x,'c',9x,'alpha'
     1,7x,'beta',8x,'gamma')
      read(5,1000)a,b,c,alpha,beta,gamma
 1000 format(6f12.8)
      write(6,1001)a,b,c,alpha,beta,gamma
 1001 format(1h ,6f12.8,//)
      read(5,1002)error
 1002 format(e10.2)
      write(6,1003)error
 1003 format(' this calculation will be accurate to ',e10.2,' in units o
     1f r0.')
      read(5,1004)ncell,molpc,lsym
 1004 format(3i3)
      write(6,1005)ncell,molpc,lsym
 1005 format(' the number of atoms in the asymmetric unit is ',i3,'.   t
     1here are ',i3,' formula units per cell.',/,' the space group has',
     2i3,' generating elements.')
      do 10 i=1,ncell
      read(5,1006)name(i),ax(i),ay(i),az(i),q(i),rmult(i)
   10 continue
 1006 format(a4,5f12.8)
      call symm
      write(6,1009)
 1009 format(t20,' atomic coordinates, charge, multiplicity in calculati
     1ng a0',/,t15,'x',t30,'y',t45,'z',t60,'q',t75,'rmult',/)
      do 11 i=1,ncell
   11 write(6,1010)i,name(i),ax(i),ay(i),az(i),q(i),rmult(i)
 1010 format(' ',i3,1x,a4,t11,f12.8,t25,f12.8,t40,f12.8,t55,f12.8,t70,
     1f12.8)
      alpha=alpha*pi/180.0
      beta=beta*pi/180.0
      gamma=gamma*pi/180.0
      b1=b*dcos(gamma)
      b2=b*dsin(gamma)
      c1=c*dcos(beta)
      c2=c*dcos(alpha)/dsin(gamma)+c1*dtan(gamma-pi/2.0)
      c3=sqrt(c**2-c1**2-c2**2)
      supq=0.0
      sumq=0.0
      do 20 i=1,ncell
      x(i)=ax(i)*a+ay(i)*b1+az(i)*c1
      y(i)=ay(i)*b2+az(i)*c2
      z(i)=az(i)*c3
      sumq=sumq+abs(q(i))
      if(abs(q(i)).lt.supq)go to 20
      supq=abs(q(i))
   20 continue
      delta=a*b2*c3
      apv=ncell/delta
c     calculation of r0
      r0=a**2
      rj3=-1.0
  820 rj3=rj3+1.0
      zj=rj3*c3
      rj2=-2.0
  830 rj2=rj2+1.0
      yj=rj2*b2+rj3*c2
      rj1=-2.0
  840 rj1=rj1+1.0
      xj=rj1*a+rj2*b1+rj3*c1
      do 900 n2=1,ncell
      xjp=xj+x(n2)
      yjp=yj+y(n2)
      zjp=zp+z(n2)
      do 899 n1=1,ncell
      if(q(n1)*q(n2))850,899,899
  850 r0=amin1(r0,(xjp-x(n1))**2+(yjp-y(n1))**2+(zjp-z(n1))**2)
  899 continue
  900 continue
      if(rj1-0.5)840,840,910
  910 if(rj2-rj3+0.1)830,830,920
  920 if(rj1-0.9)820,820,930
  930 eta=1.0/r0
      r0=sqrt(r0)
      write(6,1008)r0
 1008 format(//' minimum interatomic distance r0= ',f12.8)
      incr=0
      error=error/r0/supq/ncell
      go to 25
   21 if(sn*(ximo**3*apv-(delta*z0**3/248.1)))23,190,181
   23 if(incr.ge.99)go to 200
      incr=incr+1
      eta=eta+step
c     error too small means crash here.
   25 z0=sqrt(4.0*eta*amax1(-alog(error*0.7854/sumq),eta/4.0))
      ximo=amax1(sqrt(-alog(error/3.545/supq/apv)/eta),1.0/sqrt(eta**3))
      if(incr)190,40,21
   40 if(ximo**3*apv-(delta*z0**3/248.1))41,190,100
   41 step=-eta/100.0
      sn=1.0
      go to 23
  100 step=eta
      sn=-1.0
      go to 23
  181 eta=eta-step/2.0
      incr=-1
      go to 25
  190 xyz=1.0/sqrt(eta**3)
      write(6,1011)z0,ximo,eta,xyz
 1011 format(' z0= ',f9.4,' ximo= ',f9.4,' eta= ',f9.4,/,
     1' if eta=z0 or ximo= ',f9.4,', smaller bounds of summation exist.'
     2)
      ek=4.0*eta/pi/z0*sumq*exp(-z0**2/4.0/eta)
      er=2.0*sqrt(sngl(pi))*supq*apv/ximo/sqrt(eta**3)*exp(-ximo**2*eta)
      write(6,1012)ek,er
 1012 format(' k-sum error < ',e10.2,'.   r-sum error < ',e10.2,'.',/)
      go to 210
  200 if(sn.gt.0.0)go to 205
      r0=10.0/r0**2
      write(6,1013)r0
 1013 format(' error. eta must be chosen > 10/r0**2 = ',f9.4)
      go to 1
  205 r0=0.1/r0**2
      write(6,1014)r0
 1014 format(' error. eta must be chosen < 0.1/r0**2 = ',f9.4)
      go to 1
  210 cs3=1.0/c3
      bs2=1.0/b2
      bs3=-a*c2/delta
      as1=1.0/a
      as2=-b1*c3/delta
      as3=(b1*c2-c1*b2)/delta
c     now check to see if z0 or ximo is too big to sum over
      lx=int(ximo*sqrt(as1**2+as2**2+as3**2))+1
      ly=int(ximo*sqrt(bs2**2+bs3**2))+1
      lz=int(ximo*cs3)+1
      if(lx*ly*lz*ncell.lt.100000)go to 220
      l=lx*ly*lz*ncell
      write(6,1015)l
 1015 format(' error. range of r-sum=lx*ly*lz*ncell=',i9,' is too big.')
      go to 1
  220 z02p2=z0/2.0/pi
      jx=int(z02p2*a)+1
      jy=int(z02p2*sqrt(b1**2+b2**2))+1
      jz=int(z02p2*sqrt(c1**2+c2**2+c3**2))+1
      if(jx*jy*jz*ncell.lt.100000)go to 240
      m=jx*jy*jz*ncell
      write(6,1016)m
 1016 format(' error. range of k-sum=jx*jy*jz*ncell=',i9,' is too big.')
      go to 1
  240 z02p2=z02p2**2
      xi2=(ximo+a+b+c)**2
      eta4=eta/pi**2
      sqreta=sqrt(eta)
 1400 ar0=0.0
      do 500 natom=1,ncell
      if(rmult(natom).lt.0.5)go to 500
      psia=0.0
      psi2=0.0
      j1=-jx-1
  241 j1=j1+1
      j2=-jy-1
  242 j2=j2+1
      j3=-jz-1
  243 j3=j3+1
      if(iabs(j1)+iabs(j2)+iabs(j3))298,298,247
  247 akbar2=(j1*as1)**2+(j1*as2+j2*bs2)**2+(j1*as3+j2*bs3+j3*cs3)**2
c..rlm  there is a potential problem here. akbar is not defined as yet.
c       i'm not sure if it should reference akbar2 or not, but am changing
c       it. 
c     if(akbar-z02p2)250,250,298
      if(akbar2-z02p2)250,250,298
  250 si=0.0
      ae=-dble(akbar2/eta4)
      do 260 n=1,ncell
      si=si+q(n)*dexp(ae)*dcos((j1*(ax(n)-ax(natom))+j2*(ay(n)-
     1ay(natom))+j3*(az(n)-az(natom)))*2.0*pi)
  260 continue
      psia=psia+si/akbar2
  298 if(j3.lt.jz)go to 243
      if(j2.lt.jy)go to 242
      if(j1.lt.jx)go to 241
      psia=psia*r0/delta/pi
      write(6,1017)natom,psia
 1017 format(' psia at atom number ',i3,' is ',f12.8,' in units of r0.')
      psib=2.0*q(natom)*r0*dsqrt(eta/pi)
      write(6,1018)natom,psib
 1018 format(' psib at atom number ',i3,' is ',f12.8,' in units of r0.')
      ix=-lx-1
  320 ix=ix+1
      iy=-ly-1
  321 iy=iy+1
      iz=-lz-1
  322 iz=iz+1
      if((ix*a+iy*b1+iz*c1)**2+(iy*b2+iz*c2)**2+(iz*c3)**2-xi2)
     1349,349,398
  349 n=0
  350 n=n+1
      if(iabs(ix)+iabs(iy)+iabs(iz)+iabs(n-natom))360,397,360
  360 xim=sqrt((ix*a+iy*b1+iz*c1+x(n)-x(natom))**2+(iy*b2+iz*c2+y(n)-
     1y(natom))**2+(iz*c3+z(n)-z(natom))**2)
      if(sqreta*xim.gt.8.0)go to 397
      psi2=psi2+q(n)*derfc(dble(sqreta*xim))/xim
  397 if(n.lt.ncell)go to 350
  398 if(iz.le.lz)go to 322
      if(iy.le.ly)go to 321
      if(ix.le.lx)go to 320
      psi2=psi2*r0
      write(6,1019)natom,psi2
 1019 format(' psi2 at atom number ',i3,' is ',f12.8,' in units of r0.')
      psi=psia-psib+psi2
      write(6,1020)natom,psi
 1020 format(' the total potential psi at atom number ',i3,' is ',
     1f12.8,' in units of r0.')
      energ=psi*q(natom)/2.0/r0*14.399782
      write(6,1035)energ
 1035 format(' this corresponds to an ionic energy of ',f15.8,
     1' ev at each site of this type.',/)
      ar0=ar0+q(natom)*rmult(natom)*psi
  500 continue
      ar0=-ar0/2.0/molpc
      adel0=ar0*(delta/molpc)**(1.0/3.0)/r0
      emax=(er+ek)*ncell*supq/2.0/molpc
      edel0=emax*(delta/molpc)**(1.0/3.0)/r0
      write(6,1021)ar0,emax
 1021 format(' the madelung constant ar0 is ',f12.8,' +- ',f12.8)
      write(6,1022)adel0,edel0
 1022 format(' the madelung constant a delta 0 is ',f12.8,' +- ',
     1f12.8,/,' these errors do not include input and round-off errors.'
     2)
      ar0=-ar0/r0*14.399782
      write(6,1033)ar0
 1033 format(1h0,' total ionic energy = ',f14.8,' ev per fmla unit.')
      go to 1
 2000 stop
      end
