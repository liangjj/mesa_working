*Deck M6010
c***begin prologue     M6010
c***date written       890629   (yymmdd)
c***revision date      891212   (yymmdd)
c                      Revised To Read Data From Mesa Which Is Then
c                      Made Compatible With BIS Kohn Codes.
c***keywords           m6010, link 6010, Kohn Data
c***author             Schneider, Barry (lanl)
c***source             m6010
c***purpose            Enter Data For Kohn Calculation
c***
c
c***references
c
c***routines called    IOsys, Util and MDutil
c***end prologue       M6010
      program kohndt
      implicit integer (a-z)
      character *1600 card
      character *8  cpass, presnt, filkne, chrkey
      character *10 fptoc
      character *16 ftitl, bflabl(2000)
      character *4096 ops
      character *128 namkne
      character *32 xform
      character *4 itoc
      character *80 title
      logical logkey, prbaso, prbasn, propt, prden, provlp
      logical prdir1, prdir2, prdir, prvec, diagdr, noopt, rearr
      real *8 z, fpkey, rmin, rmax, ksqmax, echan, energy, reschg
      real *8 ene
      dimension z(1), echan(100), energy(100)
      common a(1)
      common /io/ inp, iout
      common / memory / ioff
      equivalence (z,a)
      call drum
      call iosys ('read character options from rwf',-1,0,0,ops)
      prbaso=logkey(ops,'PRINT=M6010=OLD-BASIS',.false.,' ')
      prbasn=logkey(ops,'PRINT=M6010=NEW-BASIS',.false.,' ')
      prvec=logkey(ops,'PRINT=M6010=TRANSFORMATION-MATRIX',.false.,' ')
      propt=logkey(ops,'PRINT=M6010=OPTICAL-POTENTIAL',.false.,' ')
      prden=logkey(ops,'PRINT=M6010=DENSITY-MATRIX',.false.,' ')
      provlp=logkey(ops,'PRINT=M6010=OVERLAP',.false.,' ')
      prdir1=logkey(ops,'PRINT=M6010=1-ELECTRON-DIRECT-HAMILTONIAN',
     1              .false.,' ')
      prdir2=logkey(ops,'PRINT=M6010=2-ELECTRON-DIRECT-HAMILTONIAN',
     1              .false.,' ')
      prdir=logkey(ops,'PRINT=M6010=DIRECT-HAMILTONIAN',.false.,' ')
      diagdr=logkey(ops,'M6010=DIAGONALIZE',.false.,' ')
      noopt=logkey(ops,'KOHN=NOOPT',.false.,' ')
      call iosys ('read character "mesa kohn filename" from rwf',-1,
     1             0,0,namkne)
      call iosys ('open kohn as old',0,0,0,namkne)
      write (iout,500)
      call posinp('$KOHNDT',cpass)
      call cardin(card)
      filkne=chrkey(card,'kohn-data-file-name','KOHNDT',' ')
      call captlz(filkne,filkne)
      call iosys ('write character "kohn data filename" to rwf',0,0,0,
     1            filkne)
      pntbuf=intkey(card,'point-buffer',20000,' ')
c----------------------------------------------------------------------c
c      Get Channel And Scattering Energies. Put On Kohndt              c
c----------------------------------------------------------------------c
      call iosys ('open kohndt as new on ssd',262144,0,0,filkne)
      nchano=intkey(card,'no-open-channels',1,' ')
      nchanc=intkey(card,'no-closed-channels',0,' ')
      nchan=nchano+nchanc
      call iosys ('read integer nenergy from kohn',1,nener,0,' ')
      do 10 i=1,nchan
         call iosys ('read real "ci energy '//itoc(i)//'" from kohn',
     1               1,echan(i),0,' ')
   10 continue
      call iosys ('write integer "no. energies" to kohndt',1,
     1             nener,0,' ')
      call iosys ('write integer "no. channels" to kohndt',1,
     1             nchan,0,' ')
      call iosys ('write real "chan energies" to kohndt',nchan,
     1             echan,0,' ')
      call iosys ('read real "scattering energies" from kohn',nener,
     1            energy,0,' ')
c----------------------------------------------------------------------c
c               Convert From Hartrees To Rydbergs                      c
c----------------------------------------------------------------------c
      do 1 iene=1,nener
         energy(iene)=2.d+00*energy(iene)
    1 continue 
      call iosys ('write real "scatt energies" to kohndt',nener,
     1             energy,0,' ')
c----------------------------------------------------------------------c
c             Get Basis Function Information                           c
c----------------------------------------------------------------------c
      call iosys('read integer "number of basis functions"'//
     $ ' from rwf',1,nbf,0,' ')
      do 2 i=1,nbf
         list(i)=i
    2 continue      
      call iosys('read real npvec from kohn',1,npvec,0,0,' ')
      call iosys ('write integer "size of p space" to kohndt',1,
     1             npvec,0,' ')
      nsmall=intkey(ops,'KOHN=NSMALL',nsmall,' ')
      write(iout,700) nsmall,npvec
      nl2=intkey(ops,'KOHN=NL2',npvec,' ')
      call iosys ('write integer nsmall to kohndt',1,nsmall,0,' ')
      nmotot=nl2+nsmall
      write(iout,800) nl2,nmotot
      rearr=.false.
      if (nmotot.ne.nbf) then
          write (iout,1500)
          call intarr(card,'orbitals-kept',list,nmotot,' ')
          rearr=.true.
      endif
      call iosys ('write integer "no. l2 orbitals" to kohndt',1,nl2,
     1             0,' ')
      call iosys ('write integer "total no. mos" to kohndt',1,nmotot,
     1             0,' ')
      if(logkey(ops,'DROP',.false.,' ')) then
         idrop=1
         call iosys('read integer "old nbf" from kohn',
     $              1,oldnbf,0,' ')
         write (iout,900)
      else
         oldnbf=nbf
         idrop=0
         write (iout,1000)
      end if
c----------------------------------------------------------------------c
C                 Get the basis function labels                        c
C----------------------------------------------------------------------c
      Call IOSys('read character "basis function labels" from rwf',
     $          -1,0,0,BFLabl)
      call iosys('read integer "number of atoms" from rwf',1,nat,0,' ')
      call iosys('write integer "number of atoms" to kohndt',1,
     1            nat,0,' ')
      call iosys('read integer "number of basis functions" from rwf',
     $     1,nbasis,0,' ')
      call iosys('length of exponents on rwf',nprim,0,0,' ')
      call iosys('length of "contraction coefficients" on rwf',
     $     ncont,0,0,' ')
      call iosys('length of "number of pure functions" on rwf',
     $     ntypes,0,0,' ')
      call iosys('read integer "number basis types" from rwf',
     $     1,nbtype,0,' ')
      call iosys('length of "power of x" on rwf',lenxyz,0,0,' ')
c----------------------------------------------------------------------c
c              Divide core for basis set information                   c
c----------------------------------------------------------------------c
      nnpbs=(nbasis+1)*nbasis/2
      nwreal=oldnbf+4*nat+ncont+nprim
      nwint=5*ntypes*nat+5*ntypes+3*lenxyz
      need0=nwreal+iadtwp(nwint)
c----------------------------------------------------------------------c
c              Divide Core For Matrix Output                           c
c----------------------------------------------------------------------c
      nnp=nbf*(nbf+1)/2
      call iosys('read integer nwks from rwf',1,mdim,0,' ')
      need1=4*nbf*nbf+2*npvec*npvec+2*nnp
c----------------------------------------------------------------------c
c               Get Larger Of Two Words                                c
c----------------------------------------------------------------------c
      words=max(need0,need1)
      call iosys ('read integer maxsiz from rwf',1,maxcor,0,' ')
      if (words.gt.maxcor) then
          call lnkerr('Requested Too Much Core')
      else
          call iosys ('write integer maxsiz to rwf',1,words,0,' ')
          call getscm(words,z,ngot,'M6010',0)
      endif
c----------------------------------------------------------------------c
c            Put Out Transformation Matrix                             c
c                        And Other                                     c
c                    Required Matrices                                 c
c----------------------------------------------------------------------c
      c=ioff
      scr=c+nbf*nbf
      s=scr+nbf*nbf
      vec=s+nbf*nbf
      hopt=vec+nbf*nbf
      hpp=hopt+npvec*npvec
      dir1=hpp+npvec*npvec
      dir2=dir1+nnp
c----------------------------------------------------------------------c
c             All Matrices Are Written In AO And MO Form               c
c                          To Kohndt                                   c
c----------------------------------------------------------------------c
      call iosys('read character "Transformation Vector" from kohn',
     $           -1,0,0,xform)
      call iosys('write character "Transformation Vector" to kohndt',
     $            0,0,0,xform)
      call iosys('read real '//xform//' from kohn',nbf*nmotot,z(c),
     1            0,' ')
      if (prvec) then
          title='Transformation Vectors'
          call prntrm(title,z(c),nbf,nbf,nbf,nbf,iout)
      endif
      call iosys ('write real '//xform//' to kohndt',nbf*nbf,
     1             z(c),0,' ')
      call iosys ('read real "overlap integrals" from kohn',nnp,z(scr),
     1             0,' ')
      call trtosq(z(s),z(scr),nbf,nnp)
      if (provlp) then
          title='Overlap Integrals'
          call prntrm(title,z(s),nbf,nbf,nbf,nbf,iout)
      endif
      call iosys ('write real "overlap integrals" to kohndt',nbf*nbf,
     1             z(s),0,' ')
c----------------------------------------------------------------------c
c            Get Ao One-Electron Matrix And Transform                  c
c                       To Mo Basis                                    c
c----------------------------------------------------------------------c
      call iosys('read real "direct ao 1e kohn hamiltonian"'//
     $' from kohn',nnp,z(dir1),0,' ')
      call trtosq(z(scr),z(dir1),nbf,nnp)
      call iosys ('write real "ao 1e kohn hamiltonian" to kohndt',
     1             nbf*nbf,z(scr),0,' ')
      if (prdir1) then
          title='AO 1E Kohn hamiltonian'
          call prntrm(title,z(scr),nbf,nbf,nbf,nbf,iout)
      endif
      call ebc(z(vec),z(scr),z(c),nbf,nbf,nbf)
      call ebtc(z(scr),z(c),z(vec),nbf,nbf,nbf)
      if (rearr) then
          call newmat(z(scr),
      call iosys ('write real "mo 1e kohn hamiltonian" to kohndt',
     1             nbf*nbf,z(scr),0,' ')
      if (prdir1) then
          title='MO 1E Kohn hamiltonian'
          call prntrm(title,z(scr),nbf,nbf,nbf,nbf,iout)
      endif
c----------------------------------------------------------------------c
c         Now Do Same With Part Depending On Density Matrix            c
c----------------------------------------------------------------------c
      call iosys('rewind "direct ao 2e kohn hamiltonian" on kohn',
     $ 0,0,0,' ')
      do 20 i=1,nchan
         do 30 j=1,i
            call iosys('read real "ao t1pdm:'//itoc(i)//
     $                 itoc(j)//'" from kohn',nbf*nbf,z(scr),0,' ')
            call iosys('write real "ao t1pdm:'//itoc(i)//
     $                 itoc(j)//'" to kohndt',nbf*nbf,z(scr),0,' ')
            if (prden) then
                title='AO Density Matrix For State 1 ='//itoc(i)//
     1                ' State 2 ='//itoc(j)
                call prntrm(title,z(scr),nbf,nbf,nbf,nbf,iout)
            endif
            call iosys('read real "mo t1pdm:'//itoc(i)//
     $                 itoc(j)//'" from kohn',nbf*nbf,z(scr),0,' ')
            call iosys('write real "mo t1pdm:'//itoc(i)//
     $                 itoc(j)//'" to kohndt',nbf*nbf,z(scr),0,' ')
            if (prden) then
                title='MO Density Matrix For State 1 ='//itoc(i)//
     1                ' State 2 ='//itoc(j)
                call prntrm(title,z(scr),nbf,nbf,nbf,nbf,iout)
            endif
            call iosys('read real "direct ao 2e kohn hamiltonian"'//
     $                 ' from kohn without rewinding',nnp,z(dir2),0,' ')
            call trtosq(z(scr),z(dir2),nbf,nnp)
            call iosys('write real "ao 2e kohn hamiltonian'//itoc(i)//
     1                 itoc(j)//'" to kohndt',nbf*nbf,z(scr),0,' ')
            if (prdir2) then
                title='AO 2 Electron Kohn Hamiltonian For State 1 ='//
     1                 itoc(i)//' State 2 ='//itoc(j)
                call prntrm(title,z(scr),nbf,nbf,nbf,nbf,iout)
            endif
            call ebc(z(vec),z(scr),z(c),nbf,nbf,nbf)
            call ebtc(z(scr),z(c),z(vec),nbf,nbf,nbf)
            call iosys('write real "mo 2e kohn hamiltonian'//itoc(i)//
     1                 itoc(j)//'" to kohndt',nbf*nbf,z(scr),0,' ')
            if (prdir2) then
                title='MO 2 Electron Kohn Hamiltonian For State 1 ='//
     1                 itoc(i)//' State 2 ='//itoc(j)
                call prntrm(title,z(scr),nbf,nbf,nbf,nbf,iout)
            endif
c----------------------------------------------------------------------c
c      if channel i = channel j add one-electron contribution to       c
c      direct Hamiltonian                                              c
c----------------------------------------------------------------------c
            if(i.eq.j) then
               do 40 iii=1,nnp
   40             z(dir2+iii-1) = z(dir2+iii-1) + z(dir1+iii-1)
            endif
            call trtosq(z(scr),z(dir2),nbf,nnp)
            call iosys('write real "ao kohn hamiltonian'//itoc(i)//
     1                 itoc(j)//'" to kohndt',nbf*nbf,z(scr),0,' ')
            if (prdir) then
                title='AO Kohn Hamiltonian For State 1 ='//
     1                 itoc(i)//' State 2 ='//itoc(j)
                call prntrm(title,z(scr),nbf,nbf,nbf,nbf,iout)
            endif
            call ebc(z(vec),z(scr),z(c),nbf,nbf,nbf)
            call ebtc(z(scr),z(c),z(vec),nbf,nbf,nbf)
            call iosys('write real "mo kohn hamiltonian'//itoc(i)//
     1                 itoc(j)//'" to kohndt',nbf*nbf,z(scr),0,' ')
            if (prdir) then
                title='MO Kohn Hamiltonian For State 1 ='//
     1                 itoc(i)//' State 2 ='//itoc(j)
                call prntrm(title,z(scr),nbf,nbf,nbf,nbf,iout)
            endif
            if (diagdr) then
                call tred2(nbf,nbf,z(scr),z(vec),z(s),z(scr))
                call tql2(nbf,nbf,z(vec),z(s),z(scr),ierr)
                title='Eigenvalues Of Direct Hamiltonian I='
     1                 //itoc(i)//' J='//itoc(j)
                write (iout,2) title
                write (iout,3) (z(ii),ii=vec,vec+nbf-1)
            endif
   30    continue
   20 continue
c----------------------------------------------------------------------c
c         Now Output The Optical Potential And Hpp                     c
c----------------------------------------------------------------------c
      call iosys('rewind hopt on kohn',0,0,0,' ')
      call iosys('rewind hpp on kohn',0,0,0,' ')
      ntot = npvec*npvec
      do 50 iene=1,nener
         ene=echan(1)+.5d+00*energy(iene)
         call iosys('read real hpp from kohn without rewinding',
     x               ntot,z(hpp),0,' ')
         if (.not.noopt) then
              call iosys('read real hopt from kohn without rewinding',
     x                    ntot,z(hopt),0,' ')
         else
              call rzero(z(hopt),ntot)
         endif
c----------------------------------------------------------------------c
c          Mesa Computes Hopt = Hpq (Hqq - E)**-1 Hqp                  c
c          Therefore change its sign here To Agree With Standard       c
c                         Convention.                                  c
c----------------------------------------------------------------------c
         do 60 iip = 1, ntot
            z(hopt+iip-1) = -z(hopt+iip-1)
   60    continue
         if (propt) then
             title='HPP Energy ='//fptoc(ene)
             call prntrm(title,z(hpp),npvec,npvec,npvec,npvec,iout)
             title='VPP Energy ='//fptoc(ene)
             call prntrm(title,z(hopt),npvec,npvec,npvec,npvec,iout)
         endif
         ftitl='h(pp)-'//fptoc(ene)
         call iosys ('write real '//ftitl//' to kohndt',ntot,
     1               z(hpp),0,' ')
c----------------------------------------------------------------------c
c              Add HPP And HOPT Together And Store                     c
c----------------------------------------------------------------------c
         do 65 iip=1,ntot
            z(hopt+iip-1)=z(hopt+iip-1)+z(hpp+iip-1)
   65    continue
         ftitl='v(pp)-'//fptoc(ene)
         call iosys ('write real '//ftitl//' to kohndt',ntot,
     1               z(hopt),0,' ')
   50 continue
c----------------------------------------------------------------------c
c           Get Basis Function Information                             c
c           From RWF File And Put In New Format                        c
c----------------------------------------------------------------------c
      nnp=nnpbs
      index=ioff
      zan=index+oldnbf
      c=zan+nat
      cont=c+3*nat
      ex=cont+ncont
      ptprim=WPAdTI(Ex+NPrim)
      noprim=ptprim+ntypes*nat
      nocont=noprim+ntypes*nat
      ptcont=nocont+ntypes*nat
      start=ptcont+ntypes*nat
      nocart=start+ntypes*nat
      nobf=nocart+ntypes
      minmom=nobf+ntypes
      maxmom=minmom+ntypes
      mintyp=maxmom+ntypes
      nx=mintyp+ntypes
      ny=nx+lenxyz
      nz=ny+lenxyz
      call basout(z(c),z(ex),z(cont),a(ptprim),a(noprim),a(nocont),
     1            a(ptcont),nat,nprim,ntypes,nbtype,nnp,ncont,a(start),
     2            nbasis,z(zan),a(nocart),a(nobf),a(maxmom),a(mintyp),
     3            a(nx),a(ny),a(nz),a(minmom),a(index),idrop,oldnbf,
     4            ncon,prbaso,prbasn)
      lmax=intkey(card,'maximum-l-value',30,' ')
      mumax=intkey(card,'maximum-m-value',5,' ')
      rmin=fpkey(card,'minimum-r-value',1.e-04,' ')
      rmax=fpkey(card,'maximum-r-value',10.0,' ')
      ksqmax=fpkey(card,'maximum-k**2',1.0,' ')
      ksqmax=sqrt(ksqmax)
      nper=intkey(card,'points-per-interval-for-spline-coefficients',
     1            4,' ')
      maxlm=intkey(card,'maximum-lm-chan',1,' ')
      reschg=fpkey(card,'net-charge',0.0,' ')
      nstrio=nchano*(nchano+1)/2
      nstric=nchanc*(nchanc+1)/2
      nstri=nchan*(nchan+1)/2
      rmin=rmin*ksqmax
      rmax=rmax*ksqmax
      nr=(rmax-rmin)*nper
      presnt='present'
      call iosys ('write character kohndata to kohndt',0,0,0,presnt)
      call iosys ('write integer "no. open chan" to kohndt',1,nchano,
     1             0,' ')
      call iosys ('write integer "no. closed chan" to kohndt',1,
     1            nchanc,0,' ')
      call iosys ('write integer "no. states" to kohndt',1,nchan,0,' ')
      call iosys ('write integer "max l in ylm" to kohndt',1,lmax,
     1             0,' ')
      call iosys ('write integer "max m in ylm" to kohndt',1,mumax,
     1             0,' ')
      call iosys ('write real rmin to kohndt',1,rmin,0,' ')
      call iosys ('write real rmax to kohndt',1,rmax,0,' ')
      call iosys ('write integer "total points" to kohndt',1,nr,0,' ')
      call iosys ('write integer maximum-l to kohndt',1,lmax,0,' ')
      call iosys ('write real charge to kohndt',1,reschg,0,' ')
c----------------------------------------------------------------------c
c               Count Up For Words Needed In Link M6005                c
c----------------------------------------------------------------------c
c----------------------------------------------------------------------c
c                There Are Four Types Of Functions                     c
c            Complex Open, Real Open, Closed And Bound                 c
c----------------------------------------------------------------------c
c----------------------------------------------------------------------c
c                 The Matrices Are:                                    c
c                 +                           +                        c
c        1. hpbo=h open-bound open   2. hpbc=h open-bound closed       c
c        3. hpbom=same as 1. for mo  4. same as 2. for mo              c
c                 +      +                   +      -                  c
c        5. hphp=h open-h open       6.hphm=h open-h open              c
c                 +                                                    c
c        7. hphc=h open-closed       8. hchc=closed-closed             c
c        9. hcbo=closed-bound open  10. hcbc=closed-bound closed       c
c        11.ofbo=overlap open-bound open 12. ofbom=same as 11 for mo   c
c        13.ocbc=overlap closed-bound closed                           c
c        14.ocbcm=same as 13 for mo                                    c
c----------------------------------------------------------------------c
 
      hpbow=2*maxlm*nchano*ncon*nchano
      hpbcw=2*maxlm*nchano*ncon*nchanc
      hpbowm=2*maxlm*nchano*nbf*nchano
      hpbcwm=2*maxlm*nchano*nbf*nchanc
      hphpw=2*maxlm*maxlm*nstrio
      hphmw=2*maxlm*maxlm*nchano*nchano
      hphcw=2*maxlm*maxlm*nchano*nchanc
      hchcw=maxlm*maxlm*nstric
      hcbow=maxlm*nchanc*ncon*nchano
      hcbcw=maxlm*nchanc*ncon*nchanc
      ofbow=2*maxlm*ncon*nchano
      ofbowm=2*maxlm*nbf*nchano
      ocbcw=maxlm*ncon*nchanc
      ocbcwm=maxlm*nbf*nchanc
      vec=1
      hpbo=vec+ncon*nbf
      hpbc=hpbo+hpbow
      hphp=hpbc+hpbcw
      hphm=hphp+hphpw
      hphc=hphm+hphmw
      hchc=hphc+hphcw
      hcbo=hchc+hchcw
      hcbc=hcbo+hcbow
      ofbo=hcbc+hcbcw
      ocbc=ofbo+ofbow
      hpbom=ocbc+ocbcw
      hpbcm=hpbom+hpbowm
      ofbom=hpbcm+hpbcwm
      ocbcm=ofbom+ofbowm
      scrc=ocbcm+ocbcwm
      scrr=scrc+2*maxlm*max(maxlm,ncon)
      ipow=scrr+maxlm*max(maxlm,ncon)
      x=ipow+lmax+1
      beswdc=2*nr*(lmax+1)
      if (reschg.ne.0.0) then
          beswdc=beswdc*nchano
      endif
      hs=x+nr
      hsder=hs+beswdc
      cj=hsder+beswdc
      cy=cj+beswdc
      musthv=cy+beswdc
      if(nchanc.ne.0) then
         beswdr=nr*(lmax+1)
         ms=musthv
         msder=ms+beswdr
         cms=msder+beswdr
         cmsd=cms+beswdr
         musthv=cmsd+beswdr
      endif
      noarr=4*maxlm*nchano+2*maxlm*nchanc+6+nstri
     1                    +(lmax+1)*(mumax+mumax+1)+ncon
     2                    +4*maxlm+max(4*maxlm,2*ncon)
      avail=maxcor-musthv
      bigbuf=avail/noarr
      pntbuf=min(pntbuf,bigbuf)
      write (iout,600) ncon, nbf, nchano, nchanc, lmax, mumax,
     1                  maxlm, reschg
      write (iout,100) avail, bigbuf, pntbuf
      words=musthv+noarr*pntbuf
      write (iout,200) words
      if (words.gt.maxcor) then
          call lnkerr('Not Enough Memory For Calculation:Quit')
      endif
      call iosys ('write integer "point buffer" to kohndt',1,pntbuf,
     1             0,' ')
      call iosys ('write integer maxsiz to rwf',1,maxcor,0,' ')
    2 format (//,a80)
    3 format ( (/,5x,5(e15.8,1x) ) )
  100 format(/,5x,i8,1x,'Words Available',5x,'Largest Buffer Possible',
     1       1x,i8,//,5x,'Point Buffer Selected For Now',1x,i8)
  200 format(/,5x,'Need',1x,i8,1x,'Words In M6005')
  500 format (/,15x,'M6010: Process MESA Data And Memory Allocation Rout
     1ine')
  600 format(/,5x,'No. Contracted',1x,i4,2x,'No. MoS',1x,i4,2x,
     1            'No. Open Channels',1x,i3,/,5x,
     2            'No. Closed Channels',1x,i3,2x,'L Max',1x,i3,2x,
     3            'M Max',1x,i3,2x,'Maxlm/Chan',1x,i3,/5x,
     4            'Residual Charge',1x,f8.3)        
  700 format (/,5x,'No. Valence Orbitals',1x,i4,2x,'No. P-Space Vectors'
     1         ,1x,i6)
  800 format (/,5x,'No. L**2 Expansion Orbitals',1x,i4,2x,'Total No. L**
     12 Functions',1x,i4)
  900 format (/,20x,'***** Dropping Basis Functions *****')
 1000 format (/,20x,'***** No Basis functions Dropped *****')
 1500 format (/,5x,'Total Of Nsmall And Nl2 Less Than Nbf: Functions '
     1             //'Will Be Deleted')
      call chainx(0)
      stop
      end
*Deck Basout
c***begin prologue     Basout
c***date written       901214   (yymmdd)
c***revision date               (yymmdd)
c***keywords           m6010, link 6010, Kohn Data
c***author             Schneider, Barry (LANL)
c***source             m6010
c***purpose            Basis From Mesa To Compatible
c***                   File For Kohn Codes.
c
c***references
c
c***routines called    IOsys, Util and MDutil
c***end prologue       Basout
      subroutine basout(coords,ex,cont,ptprim,noprim,nocont,ptcont,nat,
     1                 nprim,ntypes,nbtype,nnp,ncont,start,nbasis,zan,
     2                 nocart,nobf,maxmom,mintyp,nx,ny,nz,minmom,index,
     3                 idrop,oldnbf,ncon,prbaso,prbasn)
      implicit integer (a-z)
      real *8 ex, cont, zan, coords, eta
      character*3 ctype, fnsym
      dimension ex(nprim), cont(ncont), zan(nat), ptprim(nat,ntypes)
      dimension noprim(nat,ntypes), nocont(nat,ntypes)
      dimension ptcont(nat,ntypes), start(nat,ntypes), nocart(ntypes)
      dimension nobf(ntypes), maxmom(ntypes), mintyp(ntypes)
      dimension minmom(ntypes), nx(*), ny(*), nz(*), index(oldnbf)
      dimension coords(3,nat), eta(300,5), nstart(300), nstop(300)
      dimension lnew(300), mnew(300), nnew(300), cnt(300)
      dimension ctype(0:3,0:3,0:3)
      common/io/inp,iout
      Character*4 IToC
      Character*4 FuncNm
      logical logkey, prbaso, prbasn
      ctype(0,0,0)='S'
      ctype(1,0,0)='X'
      ctype(0,1,0)='Y'
      ctype(0,0,1)='Z'
      ctype(2,0,0)='XX'
      ctype(0,2,0)='YY'
      ctype(0,0,2)='ZZ'
      ctype(1,1,0)='XY'
      ctype(1,0,1)='XZ'
      ctype(0,1,1)='YZ'
      ctype(3,0,0)='XXX'
      ctype(0,3,0)='YYY'
      ctype(0,0,3)='ZZZ'
      ctype(2,1,0)='XXY'
      ctype(2,0,1)='XXZ'
      ctype(1,2,0)='XYY'
      ctype(0,2,1)='YYZ'
      ctype(1,0,2)='XZZ'
      ctype(0,1,2)='YZZ'
      ctype(1,1,1)='XYZ'
c----------------------------------------------------------------------c
C     Retrieve information about the most demanding shell block        c
c----------------------------------------------------------------------c
      call iosys('read integer maxprm from rwf',1,MaxPrm,0,' ')
      call iosys('read integer maxcont from rwf',1,MxCont,0,' ')
      call iosys('read integer maxl from rwf',1,MaxL,0,' ')
      call iosys('read integer maxblk from rwf',1,MaxBlk,0,' ')
      Call iosys('read integer d1maxblk from rwf',1,DLen,0,' ')
      Call iosys('read integer dolp from rwf',1,DoLP,0,' ')
C----------------------------------------------------------------------c
C     Read in basis set information from read-write file               c
c----------------------------------------------------------------------c
      call iosys('read real exponents from rwf',-1,ex,0,' ')
      call iosys('read real "contraction coefficients" from rwf',
     $     -1,cont,0,' ')
      call iosys('read real "nuclear charges" from rwf',-1,zan,0,' ')
      call iosys('read real coordinates from rwf',-1,coords,0,' ')
      call iosys('read integer "pointer to primitives" from rwf',
     $     -1,ptprim,0,' ')
      call iosys('read integer "number of primitives" from rwf',
     $     -1,noprim,0,' ')
      call iosys('read integer "pointer to contraction coefficients"'//
     $     ' from rwf',-1,ptcont,0,' ')
      call iosys('read integer "number of contraction coefficients" '//
     $     'from rwf',-1,nocont,0,' ')
      call iosys('read integer "number of cartesians" from rwf',
     $     -1,nocart,0,' ')
      call iosys('read integer "number of pure functions" from rwf',
     $     -1,nobf,0,' ')
      call iosys('read integer "minimum momentum" from rwf',
     $     -1,minmom,0,' ')
      call iosys('read integer "maximum momentum" from rwf',
     $     -1,maxmom,0,' ')
      call iosys('read integer "pointer to cartesians" from rwf',
     $     -1,mintyp,0,' ')
      call iosys('read integer "pointer to first function" from rwf',
     $     -1,start,0,' ')
      call iosys('read integer "power of x" from rwf',-1,nx,0,' ')
      call iosys('read integer "power of y" from rwf',-1,ny,0,' ')
      call iosys('read integer "power of z" from rwf',-1,nz,0,' ')
c----------------------------------------------------------------------c
c             Write Out The Location And Charge Of The Atoms           c
c----------------------------------------------------------------------c
      call iosys ('write real "nuclear charges" to kohndt',nat,zan,
     1             0,' ')
      do 10 i=1,nat
         call iosys ('write real "x-y-z atom-'//itoc(i)//'" to kohndt',
     1               3,coords(1,i),0,' ')
   10 continue
c
      nstart(1) = 1
      ikount = 0
      iloc = 0
c
c.. bhl 9/13/89         using index array to drop functions
c
      if(idrop.ne.0) then
          write(iout,100)
          call iosys('read integer "packing index vector" from kohn',
     $                oldnbf,index,0,' ')
      else
          do 999 i=1,oldnbf
             index(i)=i
 999      continue
      endif
c
      kbf=0
c
c.. bhl 9/13/89             kbf counter
c
      do 9 iatom=1,nat
         write(iout,101) iatom, zan(iatom)
         do 7 itype=1,nbtype
            if (noprim(iatom,itype).gt.0) then
                mini=mintyp(itype)
                maxi=mintyp(itype)+nocart(itype)-1
                imax=maxmom(itype)
                write(iout,102) itype,imax
                nprimi=noprim(iatom,itype)
                nconti=nocont(iatom,itype)
                write(iout,103) nprimi, nconti
c
c  build arrays for quad codes: nstart, nstop, lnew, mnew, nnew, eta
c
c
c  the way the  indexing for quad codes works is that there are
c  ncontra contracted functions.  For the ith contracted function nstart(i)
c  and nstop(i) give the first and last locations of the relevant quantities
c  in the arrays lnew(i), mnew(i), nnew(i), and eta(i,j=1,5)
c   lnew, mnew, and new are the powers of x, y, and z of the primitive
c   and eta(i,j=1,5) contains the center, exponent and contraction coefficient
c
                do 6 icont=1,nconti
                   do 3 m=mini,maxi
c..bhl 9/13/89                  kbf counter
                      kbf=kbf+1
                      if(index(kbf).ne.0) then
c..bhl 9/13/89                  if statement
                         ikount = ikount + 1
                         do 4 iii=1,nprimi
                            iiirel = iii-1+ (icont-1)*nprimi
                            if (cont(ptcont(iatom,itype)+iiirel).gt.
     1                                           1.e-20) then
                                iloc = iloc+1
                                cnt(iloc)=iatom
                                eta(iloc,1) = coords(1,iatom)
                                eta(iloc,2) = coords(2,iatom)
                                eta(iloc,3) = coords(3,iatom)
                                eta(iloc,4) = ex(ptprim(iatom,itype)
     1                                           +iii - 1)
                                eta(iloc,5) = cont(ptcont(iatom,itype)
     1                                             +iiirel)
                                lnew(iloc) = nx(m)
                                mnew(iloc) = ny(m)
                                nnew(iloc) = nz(m)
                            endif
    4                   continue
                        nstop(ikount) = iloc
                        nstart(ikount+1) = nstop(ikount)+ 1
                      endif
c..bhl 9/13/89                  end if
    3              continue
    6           continue
c
      if(prbaso) then
         write(iout,104)
         call matout(ex(ptprim(iatom,itype)),nprimi,1,
     $               nprimi,1,iout)
      endif
      if(prbaso) then
         write(iout,105)
         call matout(cont(ptcont(iatom,itype)),nprimi,nconti,
     $               nprimi,nconti,iout)
      endif
      if (prbaso) then
          write(iout,106)
          do 5 m=mini,maxi
             write(iout,107) nx(m), ny(m), nz(m)
    5      continue
      endif
           endif
    7    continue
    9 continue
      npr = iloc
      ncon = ikount
c
c write the newly indexed basis set information to kohndt.
c
c
      call iosys ('write integer "no. primitives" to kohndt',1,
     1             npr,0,' ')
      call iosys ('write integer "no. contracted" to kohndt',1,
     1             ncon,0,' ')
      call iosys ('write integer start to kohndt',ncon,nstart,
     1             0,' ')
      call iosys ('write integer stop to kohndt',ncon,nstop,
     1             0,' ')
      call iosys ('write integer "x power" to kohndt',npr,lnew,0,' ')
      call iosys ('write integer "y power" to kohndt',npr,mnew,0,' ')
      call iosys ('write integer "z power" to kohndt',npr,nnew,0,' ')
      call iosys ('write real eta to kohndt',1500,eta,0,' ')
      call iosys ('write integer atom to kohndt',npr,cnt,0,' ')
      write(iout,108)
      if(prbasn) then
         write (iout,109)
         write (iout,110)
         do 12 i=1,ncon
            nlow = nstart(i)
            nhi = nstop(i)
            do 11 j=nlow,nhi
               write(iout,111) i, j, ctype(lnew(j),mnew(j),nnew(j)),
     1                         cnt(j), (eta(j,jj),jj=4,5)
   11       continue
   12    continue
      endif
C
      Return
  100 format (/,15x,'Drop Index Vector Read From KOHN')
  101 format (/,5x,'Atom Number',1x,i4,2x,'Charge',f15.8)
  102 format (/,5x,'Type Primitive',1x,i2,2x,'Maximum Angular Momentum',
     1        1x,i2)
  103 format (/,5x,'No. Primitives',1x,i3,2x,'No. Contracted',1x,i3)
  104 format(/,5x,'Primitive Exponents')
  105 format(/,5x,'Contraction Coefficients')
  106 format (/,5x,'XYZ Convention')
  107 format (/,5x,'Total No. Primitive Functions',1x,i4,1x,'Total No. C
     1ontracted Functions',1x,i4)
  108 format (/,5x,'Basis Set Information Written To Kohndat')
  109 format (/,5x,'Basis Set In New Format')
  110 format(/,5x,'Con Fn',3x,'Ao',2x,'Sym',4x,'Cen',9x,'Exp',11x,'Coef'
     1      )
  111 format(/,7x,i3,3x,i3,3x,a3,4x,i2,3x,f12.5,2x,f12.5)
      End
